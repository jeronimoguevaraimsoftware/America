@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Identity;
@using LiberacionProductoWeb.Localize;
@using Microsoft.Extensions.Localization;
@using LiberacionProductoWeb.Helpers;
@using Microsoft.AspNetCore.Mvc;
@model LiberacionProductoWeb.Models.ConditioningOrderViewModels.ConditioningOrderViewModel;
@inject IStringLocalizer<Resource> resource;
@inject IViewLocalizer Localizer;
@inject UserManager<LiberacionProductoWeb.Models.IndentityModels.ApplicationUser> UserManager;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Orden de acondicionamiento";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var notInformation = resource.GetString("NoInformation");
    var lengthMenu = resource.GetString("LengthMenu");
    var searchPlaceholder = resource.GetString("SearchPlaceholder");
    var info = resource.GetString("Info");
    var emptyTable = resource.GetString("EmptyTable");
    var loadingRecords = resource.GetString("LoadingRecords");
    var processing = resource.GetString("Processing");
    var zeroRecords = resource.GetString("ZeroRecords");
    var infoEmpty = resource.GetString("InfoEmpty");
    var infoFiltered = resource.GetString("InfoFiltered");
    var claimsIdentity = User.Identity as System.Security.Claims.ClaimsIdentity;
    var userFirstName = "";
    var rolesUsr = "";
    var url = Context.Request.Host.Value;
    if (claimsIdentity != null)
    {
        var name = claimsIdentity.Name;
        if (name != null)
        {
            var FullName = UserManager.FindByNameAsync(name);
            userFirstName = FullName.Result.NombreUsuario;
            rolesUsr = FullName.Result.Rol;
        }
    }
}

@await Html.PartialAsync("~/Views/Shared/_Navigation.cshtml")

<!-- ============================================================== -->
<!-- Page wrapper  -->
<!-- ============================================================== -->
<div id="content" class="content">
    <!-- begin page-header -->
    <!--h1 class="page-header">Orden de acondicionamiento</h1-->
    <!-- end page-header -->

    <div class="row">

        <div class="col-6">
            <label style="font-size:x-large;color: #005591">
                Orden de acondicionamiento
            </label>
        </div>


        @if (Model.Id > 0)
        {
            <div class="col-6" style="font-size: large; padding: 10px;">
                <label style="font-size:large">
                    Fecha y hora de creación:
                </label>
                <label>
                    @(Model.CreatedDate.HasValue ? Model.CreatedDate.Value.ToString("yyyy-MM-dd HH:mm") : string.Empty)
                </label>
                <label>Estado:</label>
                <span id="StatusLbl2">@Model.State</span>
                @*<label>@Model.State</label>*@
                <input asp-for="Status" value="@Model.State" hidden readonly />
                <input id="IsCancelled" value="@Model.IsCancelled.ToString()" hidden readonly />
            </div>
        }
    </div>

    <div class="row">
        <a href="/ProductionOrder/Index?Id=@Model.ProductionOrderId" class="btn btn-white m-r-5"><i class="fa fa-glasses"></i> Consultar orden de producción</a>
        <button name="Guardar" class='btn btn' id="Guardar" data-toggle="modal" data-target="#ModalSave" type="submit" style="background-color:transparent">
            <i class="fa fa-save"></i> Guardar
        </button>
        @if (Model.Id > 0)
        {
            @if (User.HasClaim(SecurityConstants.PERMISSION, SecurityConstants.EDITAR_OA))
            {
                <button class="btn btn" id="BtnCancelar" type="button" style="background-color:transparent">
                    <i class="fa fa-minus-circle"></i> Cancelar
                </button>
            }
            @if (User.HasClaim(SecurityConstants.PERMISSION, SecurityConstants.EDITAR_OA))
            {
                <button id="BtnCancelarApprove" class='btn btn' type="button" style="background-color:transparent">
                    <i class="fa fa-ban"></i> Aprobar cancelación
                </button>
            }
        }
        else
        {
            <button class="btn btn" data-toggle="modal" data-target="#ModalCancel" disabled type="button" style="background-color:transparent">
                <i class="fa fa-minus-circle"></i> Cancelar
            </button>

            <button data-toggle="modal" data-target="#ModalCancelApprove" disabled class='btn btn' type="button" style="background-color:transparent">
                <i class="fa fa-ban"></i> Aprobar cancelación
            </button>
        }
        @if (Model.Id > 0)
        {
            <a href="/ConditioningOrder/Index?Id=@Model.Id" class="btn m-r-5"><i class="fa fa-file"></i> Modo Lectura</a>
        }

        <!--<a href="/ConditioningOrder/ExportToPDF?IdOP=@Model.ProductionOrderId" class="btn btn-white m-r-5" type="button" style="background-color: transparent;"><i class="fa fa-file-pdf"></i> Exportar a PDF</a>

        <a href="/ConditioningOrder/ExportCertificateToPDF?IdOP=@Model.ProductionOrderId" class="btn m-r-5"><i class="fa fa-file"></i>Exportar Certificado</a>-->
        <input id="productId" value="@Model.ProductId" hidden readonly />
        <button class="btn btn" type="button" style="background-color:transparent" id="btnPrevious">← Anterior</button>
        <button class='btn btn' type="button" style="background-color:transparent" id="btnNext">Siguiente →</button>
    </div>

    <br />
    <div class="row">
        <div class="col-lg-3 m-b-15">
            <div class="m-b-5"><label for="Plant" class="mr-sm-1">Planta: </label></b></div>
            <div class="input-group"> <input id="Plant" name="Plant" value="@Model.Plant" disabled="disabled" class="form-control" /></div>
        </div>
        <div class="col-lg-3 m-b-15">
            <div class="m-b-5"><label for="Product" class="mr-sm-1">Producto: </label></div>
            <div class="input-group"><input id="Product" name="Product" value="@Model.Product" disabled="disabled" class="form-control" /></div>
        </div>
        <div class="col-lg-3 m-b-15">
            <div class="m-b-5"><label for="Tank" class="mr-sm-1">No. de tanque: </label></div>
            <div class="input-group"><input id="Tank" name="Tank" value="@Model.Tank" class="form-control" disabled="disabled" /></div>
        </div>
        <div class="col-lg-3 m-b-15">
            <div class="m-b-5"><label for="EnvasePrimario" class="mr-sm-1">Envase primario: </label></div>
            <div class="input-group"><input id="EnvasePrimario" value="@Model.ContainerPrimary" name="EnvasePrimario" class="form-control" disabled="disabled" /></div>
        </div>
        <div class="col-lg-3 m-b-15">
            <div class="m-b-5"> <label for="Batch" class="mr-sm-2">Lote de producción: </label></div>
            <div class="input-group"> <input id="Batch" name="Batch" value="@Model.LotProd" class="form-control" disabled="disabled" /></div>
        </div>
        <div class="col-lg-3 m-b-15">
            <div class="m-b-5"><label for="Presentacion" class="mr-sm-2">Presentación: </label></div>
            <div class="input-group"><input id="Presentacion" name="Presentacion" value="@Model.Presentation" class="form-control" disabled="disabled" /></div>
            <input id="StepFile" type="text" hidden readonly />
        </div>
    </div>

    <form action="/" method="POST" id="form-wizard" name="form-wizard" class="form-input-flat"
          novalidate="">
        <div id="wizard">
            <ol>
                <li>
                    Información del lote de acondicionamiento y equipos analíticos
                </li>
                <li>
                    Equipos (accesorios) empleados en el proceso de acondicionamiento
                </li>
                <li>
                    Acondicionamiento del producto - llenado de pipas (envase primario)
                </li>
                <li>
                    Control de llenado de pipas y certificado de Análisis
                </li>
                <li>
                    Conciliación de materiales y rendimiento del proceso
                </li>
                <li>
                    Liberación del producto terminado
                </li>
            </ol>
            <input hidden="hidden" asp-for="@Model.StepSaved" value="@Model.StepSaved" id="StepSaved" />
            @Html.AntiForgeryToken()
            <div id="step1">
                <fieldset>
                    @{
                        Html.RenderPartial("_Step1Text", Model);
                    }
                    <div class="form-group-sm" style="margin-bottom: 20px; padding: 0 20px;">
                        <div class="form-inline col-md-14">
                            <div class="row">
                                <div class="col-lg-3 m-b-15">
                                    <div class="m-b-5"><label for="Plant" class="mr-sm-1">Planta</label></b></div>
                                    <div class="input-group"> <input id="Plant" name="Plant" value="@Model.Plant" disabled="disabled" class="form-control" /></div>
                                </div>
                                <div class="col-lg-3 m-b-15">
                                    <div class="m-b-5"><label for="Product" class="mr-sm-1">Producto</label></div>
                                    <div class="input-group"><input id="Product" name="Product" value="@Model.Product" disabled="disabled" class="form-control" /></div>
                                </div>
                                <div class="col-lg-3 m-b-15">
                                    <div class="m-b-5"><label for="Tank" class="mr-sm-1">Nro. de Tanque</label></div>
                                    <div class="input-group"><input id="Tank" name="Tank" value="@Model.Tank" class="form-control" disabled="disabled" /></div>
                                </div>
                                <div class="col-lg-3 m-b-15">
                                    <div class="m-b-5"><label for="EnvasePrimario" class="mr-sm-1">Envase primario</label></div>
                                    <div class="input-group"><input id="EnvasePrimario" value="@Model.ContainerPrimary" name="EnvasePrimario" class="form-control" disabled="disabled" /></div>
                                </div>
                                <div class="col-lg-3 m-b-15">
                                    <div class="m-b-5"> <label for="Batch" class="mr-sm-2">Lote de producción</label></div>
                                    <div class="input-group"> <input id="Batch" name="Batch" value="@Model.LotProd" class="form-control" disabled="disabled" /></div>
                                </div>
                                <div class="col-lg-3 m-b-15">
                                    <div class="m-b-5"><label for="Presentacion" class="mr-sm-2">Presentación</label></div>
                                    <div class="input-group"><input id="Presentacion" name="Presentacion" value="@Model.Presentation" class="form-control" disabled="disabled" /></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @{
                        Html.RenderPartial("_Step2Text", Model);
                    }
                    <div class="table-responsive">
                        <table id="table-1" class="table table-striped table-bordered"
                               style="width:100%;">
                            <thead>
                                <tr>
                                    <th colspan="5">Tabla 1: Equipos analíticos</th>
                                </tr>
                                <tr>
                                    <th scope="col">Código del equipo</th>
                                    <th scope="col">Descripción del equipo</th>
                                    <th scope="col">Estado de calibración</th>
                                    <th scope="col">Observaciones</th>
                                    <th scope="col">Revisado por</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int analyticEquipmenIndex = 0;
                                }
                                @foreach (var item in Model.AnalyticEquipmentList)
                                {
                                    <tr>
                                        <td hidden="hidden" id="AnalyticEquipmenId@(analyticEquipmenIndex)">@item.Id</td>
                                        <td>
                                            <label asp-for="@item.Code" id="AnalyticEquipmentCode@(analyticEquipmenIndex)">@item.Code</label>
                                        </td>
                                        <td>
                                            <label asp-for="@item.Description" id="AnalyticEquipmentDescription@(analyticEquipmenIndex)">@item.Description</label>
                                        </td>
                                        <td>
                                            <input type="checkbox" class="yes-no-analytic-equipment" id="AnalyticEquipmentCheckTrue@(analyticEquipmenIndex)"
                                               form-control-lg
                                               data-linde-control-value="true"
                                               data-linde-control-group="AnalyticEquipment"
                                               data-linde-control-id="@(analyticEquipmenIndex)" />
                                            <label>Calibrado</label>
                                            <input type="checkbox" class="yes-no-analytic-equipment" id="AnalyticEquipmentCheckFalse@(analyticEquipmenIndex)"
                                               form-control-lg
                                               data-linde-control-value="false"
                                               data-linde-control-group="AnalyticEquipment"
                                               data-linde-control-id="@(analyticEquipmenIndex)" />
                                            <label>No calibrado</label>
                                            <input asp-for="@item.IsCalibrated" id="AnalyticEquipmentIsCalibrated@(analyticEquipmenIndex)" hidden class="form-control" />
                                        </td>
                                        <td>
                                            <input type="text" class="form-control" disabled value="@item.Notes" id="AnalyticEquipmentNotes@(analyticEquipmenIndex)" />
                                        </td>
                                        <td>
                                            <input class="form-control text-center" asp-for="@item.ReviewedBy" id="AnalyticEquipmentReviewedBy@(analyticEquipmenIndex)" hidden="hidden" />
                                            <input class="form-control text-center" asp-for="@item.ReviewedDate" id="AnalyticEquipmentReviewedDate@(analyticEquipmenIndex)" hidden="hidden" />
                                            <div id="AnalyticEquipmentReviewedSignature@(analyticEquipmenIndex)"></div>
                                        </td>
                                    </tr>
                                    analyticEquipmenIndex++;
                                }

                            </tbody>
                        </table>
                    </div>
                </fieldset>
            </div>

            <div id="step2">
                <fieldset>
                    @{
                        Html.RenderPartial("_Step3Text", Model);
                    }
                    <br />
                    <div class="input-group">
                        <select asp-for="SelectedScalesFlowMeters" asp-items="Model.ScalesFlowMeters" multiple
                                class="selectpicker show-menu-arrow" data-style="btn-inverse" form-control-lg="" data-linde-control-value="true" data-linde-control-group="Scalesflows"
                                data-live-search="true" title="Selecciona"> </select>
                    </div>
                    <button class='btn btn btn-inverse' id="BtnScalesFlowMeters" type="button" style="margin: 20px auto;" onclick="addScalesFlowMeters()">
                        <i class="fa fa-balance-scale"></i>  Agregar/Eliminar Básculas y flujometros
                    </button>
                    @*//JJGR*@
                    <div class="table-responsive" id="table2">
                        @{
                            Html.RenderPartial("_Scalesflows", Model);
                        }
                    </div>
                    @{
                        Html.RenderPartial("_Step4Text", Model);
                    }

                    <div class="form-group-sm" style="margin-bottom: 20px;">
                        <div class="table-responsive">
                            <table id="table-3" class="table table-striped table-bordered" style="width:95%;">
                                <thead>
                                    <tr>
                                        <th colspan="5">Tabla 3: Despeje de línea</th>
                                    </tr>
                                    <tr>
                                        <th scope="col">Actividad</th>
                                        <th scope="col" style="width: 200px;">Cumple</th>
                                        <th scope="col">Revisado por</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>
                                            <p id="Activitie">
                                                @* <a href='javascript:void(0)' onclick='Save(this,2);return false;' id='editData' class='btn btn-default btn-xs' data-id='2'><i class='fa fa-save'></i></a> *@
                                                Se lleva a cabo el despeje de línea de acuerdo a los puntos anteriores "@(Model.Product)" de la planta "@(Model.Plant)"
                                            </p>
                                        </td>
                                        <td>
                                            @if (@Model.PipelineClearanceOA.HasPendingReview)
                                            {
                                                <input type="checkbox" id="PipelineClearanceCheckTrue" form-control-lg disabled />
                                                <label>Cumple</label>
                                                <input type="checkbox" id="PipelineClearanceCheckFalse" form-control-lg disabled />
                                                <label>No cumple</label>
                                            }
                                            else
                                            {
                                                <input type="checkbox" id="PipelineClearanceCheckTrue" form-control-lg disabled />
                                                <label>Cumple</label>
                                                <input type="checkbox" id="PipelineClearanceCheckFalse" form-control-lg disabled />
                                                <label>No cumple</label>
                                            }
                                            <input asp-for="@Model.PipelineClearanceOA.InCompliance" id="PipelineClearanceInCompliance" name="PipelineClearanceInCompliance" hidden class="form-control" />
                                        </td>
                                        <td>
                                            <input class="form-control text-center" asp-for="@Model.PipelineClearanceOA.ReviewedBy" value="@Model.PipelineClearanceOA.ReviewedBy" id="PipelineClearanceReviewedBy" hidden="hidden" />
                                            <input class="form-control text-center" asp-for="@Model.PipelineClearanceOA.ReviewedDate" id="PipelineClearanceReviewedDate" hidden="hidden" />
                                            <div id="PipelineClearanceReviewedSignature"></div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                            <div class="right" style="color: #005591; cursor: pointer;" id="ShowDetail">
                                <label onclick="ShowDetailDL(this)">Ver evaluaciones anteriores</label>/
                                <label id="HiddeDetail" onclick="HiddeDetailDL(this)">Ocultar evaluaciones anteriores</label>
                            </div>
                            <div id="table3-detailInfo"></div>
                        </div>
                    </div>
                </fieldset>
            </div>

            <div id="step3">
                <fieldset>
                    <div>
                        <div id="divButtonsPanel">
                            <span style="display:inline-block">

                                <button class='btn btn btn-inverse' type="button" style="margin: 20px auto;" onclick="refreshTNumber()">
                                    <i class="fa fa-sync iconCustom"></i>  Actualizar
                                </button>
                                <button class='btn btn btn-inverse' type="button" style="margin: 20px auto;" onclick="ShowModalTNumber()">
                                    <i class="fa fa-truck iconCustom"></i>  Agregar tour number
                                </button>
                                <button type="button" id="btnCloseOrderSimple" class='btn btn btn-inverse' style="margin: 20px auto;">
                                    <i class="fa fa-paper-plane iconCustom"></i>Liberación sin pipas
                                </button>

                                <div id="tnumberLbl"></div>
                                <!--label onclick="refreshTNumber()"><i class="fa fa-sync"></i> Actualizar</label-->
                                <!--label onclick="ShowModalTNumber()"><i class="fa fa-plus-circle"></i>Agregar tour number</!--label>-->
                                <input id="tournumber" hidden="hidden" />
                            </span>
                            <span style="float: right;">
                                @if (User.HasClaim(SecurityConstants.PERMISSION, SecurityConstants.EDITAR_VERIFICACION_DE_PIPAS))
                                {
                                    <button class='btn btn btn-inverse' type="button" style="margin: 20px auto;" onclick="CreateCheckList()">
                                        <i class="fa fa-check iconCustom"></i>Agregar checklist web
                                    </button>
                                }
                                <button class='btn btn btn-inverse' type="button" style="margin: 20px auto;" onclick="ShowModalFile(2)">
                                    <i class="fa fa-plus iconCustom"></i>Agregar checklist Manual
                                </button>
                                <span id="checkListManualCtrls-0" name="checkListManualCtrls-0" hidden>
                                    <input type="checkbox" id="CheckListIncomplianceCheckTrue-step1" onclick="saveChecklistManualStepOne()"
                                           form-control-lg disabled />
                                    <label>Cumple</label>
                                    <input type="checkbox" id="CheckListIncomplianceCheckFalse-step1" onclick="saveChecklistManualStepOne()"
                                           form-control-lg disabled />
                                    <label>No cumple</label>
                                </span>
                                @if (User.HasClaim(SecurityConstants.PERMISSION, SecurityConstants.CONSULTAR_VERIFICACION_DE_PIPAS))
                                {
                                    <button class='btn btn btn-inverse' type="button" style="margin: 20px auto;" onclick="SerchCheckList()">
                                        <i class="fa fa-search iconCustom"></i>Mostrar checklist
                                    </button>
                                }
                            </span>
                        </div>
                        <div class="modal fade" id="numberModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div id="btnconfirm" class="modal-dialog" role="document"></div>
                        </div>
                        <div class="table-responsive" id="table4">
                            @{
                                Html.RenderPartial("_EquipmentProcess", Model);
                            }
                        </div>
                    </div>
                </fieldset>
            </div>

            <div id="step4">
                <fieldset>
                    <button class='btn btn btn-inverse' id="btnCheklistRel" type="button" style="margin: 20px auto;" onclick="ShowModalRelChecklist()">
                        <i class="fa fa-exchange-alt"></i>Relacionar checklist
                    </button>
                    <button class='btn btn btn-inverse' type="button" style="margin: 20px auto;" onclick="notificationConfirm()" id="btnNotificationConfirm">
                        <i class="fa fa-sync"></i>  Enviar notificación de conformidad
                    </button>
                    <img id="imgLoadingConfirmNotificacion" src="~/img/spinning-loading.gif" style="padding-left:10px;display: none; width:50px;" />
                    @{
                        Html.RenderPartial("_Step5Text", Model);
                    }

                    <div id="table5">
                        @{
                            Html.RenderPartial("_PipeFillingControl", Model);
                        }
                    </div>

                    @{
                        Html.RenderPartial("_Step6Text", Model);
                    }
                </fieldset>
            </div>

            <div id="step5">
                <fieldset>
                    @{
                        Html.RenderPartial("_Step7Text", Model);
                    }

                    @{
                        Html.RenderPartial("_Step8Text", Model);
                    }
                    <div class="row">
                        <div class="table-responsive">
                            <table id="table-6" class="table table-striped table-bordered"
                                   style="width:100%;">
                                <thead>
                                    <tr>
                                        <th colspan="7">
                                            Tabla 6: Rendimiento del proceso de acondicionamiento
                                        </th>
                                    </tr>
                                    <tr>
                                        <th scope="col">Tamaño del lote (Kg)</th>
                                        <th scope="col">
                                            Cantidad total de producto de grado medicinal llenado en unidades de distribución (Kg)
                                        </th>
                                        <th scope="col">
                                            Diferencia contra el tamaño del lote (Kg)
                                        </th>
                                        <th scope="col">Revisado por</th>
                                        <th scope="col">Observaciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int performanceListIndex = 0;
                                    }
                                    @foreach (var item in Model.PerformanceList)
                                    {
                                        <tr>
                                            <td hidden="hidden" id="PerformanceListId@(performanceListIndex)">@item.Id</td>

                                            <td>
                                                <input value="@item.SizeLote?.Replace(",", ".")" id="PerformanceListSizeLote@(performanceListIndex)" hidden="hidden" />
                                                @item.SizeLote?.Replace(",", ".")
                                            </td>
                                            <td>
                                                <input asp-for="@item.TotalTons" id="PerformanceListTotalTons@(performanceListIndex)" hidden="hidden" />
                                                @item.TotalTons
                                            </td>
                                            <td>
                                                <input asp-for="@item.DifTons" id="PerformanceListDifTons@(performanceListIndex)" hidden="hidden" />
                                                @item.DifTons
                                            </td>
                                            <td>

                                                @if (rolesUsr.Contains(SecurityConstants.PERFIL_USUARIO_DE_PRODUCCION))
                                                {
                                                    <button type="button" id="btnPerformanceListReviewedSignature@(performanceListIndex)" class="btn btn-success" onclick="signPerformanceRecord(@(performanceListIndex))">Firmar</button>
                                                }
                                                <input asp-for="@item.ReviewedBy" id="PerformanceListReviewedBy@(performanceListIndex)" hidden="hidden" />
                                                <input asp-for="@item.ReviewedDate" id="PerformanceListReviewedDate@(performanceListIndex)" hidden="hidden" />
                                                <div id="PerformanceListReviewedSignature@(performanceListIndex)"></div>
                                            </td>
                                            <td>
                                                <input class="form-control text-center" asp-for="@item.Notes" id="PerformanceListNotes@(performanceListIndex)" />
                                            </td>
                                        </tr>
                                        performanceListIndex++;
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </fieldset>
            </div>

            <div id="step6">
                <fieldset>
                    @{
                        Html.RenderPartial("_Step9Text", Model);
                    }
                    <div class="table-responsive">
                        <table id="table-7" class="table table-striped table-bordered"
                               style="width:50%;">
                            <thead>
                                <tr>
                                    <th colspan="2">
                                        Tabla 7: Cierre del expediente de lote
                                    </th>
                                </tr>
                                <tr>
                                    <th scope="col">Firma del responsable sanitario</th>
                                    <th scope="col">Observaciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        @if (rolesUsr.Contains(SecurityConstants.PERFIL_RESPONSABLE_SANITARIO))
                                        {
                                            <button id="btnReleasedSignature" type="button" class="btn btn-success" onclick="signCloseOrderValidate()">Firmar</button>
                                        }
                                        <input class="form-control text-center" asp-for="@Model.ReleasedBy" id="ReleasedBy" hidden="hidden" />
                                        <input class="form-control text-center" asp-for="@Model.ReleasedDate" id="ReleasedDate" hidden="hidden" />
                                        <div id="ReleasedSignature"></div>
                                    </td>
                                    <td>
                                        <input class="form-control text-center" asp-for="@Model.ReleasedNotes" id="ReleasedNotes" />
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    @if (rolesUsr.Contains(SecurityConstants.PERFIL_RESPONSABLE_SANITARIO))
                    {
                        <input asp-for="@Model.IsReleased" hidden id="IsReleased" class="form-control" style="border-color: #fff;" />
                        <button type="button" id="btnCloseOrder" data-toggle="modal" data-target="#ModalCloseOA" class="btn btn-linde" hidden>Cerrar orden de acondicionamiento</button>
                        <button type="button" id="btnOpenOrder" data-toggle="modal" data-target="#ModalOpenOA" class="btn btn-linde" hidden>Abrir orden de acondicionamiento</button>
                    }

                    <div class="table-responsive" id="divLogStatusOrder" style="margin-top:10px;">
                        <img id="imgLoadingLog" src="~/img/spinning-loading.gif" style="padding-left:10px;display: none; width:50px;" />
                        <table id="table-estatus" class="table table-striped table-bordered"
                               style="width:50%;">
                            <thead>
                                <tr>
                                    <th colspan="2">
                                        Historial de cierre/abierto de la orden de acondicionamiento
                                    </th>
                                </tr>
                                <tr>
                                    <th scope="col">Estatus</th>
                                    <th scope="col">Firma del responsable sanitario</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.StatesList != null)
                                {
                                    @foreach (var entry in Model.StatesList)
                                    {
                                        <tr>
                                            <td>@entry.State</td>
                                            <td>@entry.User<br />@entry.Date.ToString("yyyy-MM-dd HH:mm")</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </fieldset>
            </div>
        </div>
        @*historyNotes*@

        <div class="right" style="color: #005591; cursor: pointer;" id="ShowDetail">
            <label onclick="ShowHistory(this); return false;">Ver observaciones</label>/
            <label id="HiddeHistory" onclick="HiddeHistory(this); return false;">Ocultar observaciones</label>
        </div>
        <div id="detailInfo">
            <table id="table-HistoryNotes" hidden="hidden" class="table table-striped table-bordered" style="width:95%;">
                <thead>
                    <tr>
                        <th colspan="8">Historial de observaciones</th>
                    </tr>
                    <tr>
                        <th scope="col">Observaciones</th>
                        <th scope="col">Fuente</th>
                        <th scope="col">Usuario</th>
                        <th scope="col">Fecha y hora</th>
                    </tr>
                </thead>
            </table>
        </div>

        @*historyStates*@
        <div class="right" style="color: #005591; cursor: pointer;" id="ShowDetailState">
            <label onclick="ShowHistoryState(this); return false;">Ver estados</label>/
            <label id="HiddeState" onclick="HiddeStateHistory(this); return false;">Ocultar estados</label>
        </div>
        <div id="detailInfoState">
            <table id="table-HistoryState" hidden="hidden" class="table table-striped table-bordered" style="width:95%;">
                <thead>
                    <tr>
                        <th colspan="8">Historial de estados</th>
                    </tr>
                    <tr>
                        <th scope="col">Usuario</th>
                        <th scope="col">Fecha y hora</th>
                        <th scope="col">Estado</th>
                    </tr>
                </thead>
            </table>
        </div>
    </form>


    @*modales*@
    <div class="container-fluid">
        <div class="modal" id="modalUploadFileCustomers" tabindex="-1" role="dialog" aria-labelledby="modalUploadFileCustomersLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div style="font-size:20px" class="modal-body">
                        <div class="row">
                            <div id="divDropzone" class="dropzone col-md-12" style="height:350px;overflow-y:scroll;">
                                <div class="dz-message" data-dz-message><h3>Arrastra tus archivos o haz clic aquí.</h3></div>
                            </div>
                        </div>
                        <input id="dropzoneTournumber" hidden />
                        <input id="dropzoneDistributionBatch" hidden />
                        <input id="dropzonePipeNumber" hidden />
                        <input id="dropzoneTournumberIndex" hidden />
                        <input id="dropzonePipeIndex" hidden />
                    </div>
                    <div class="modal-footer">
                        @*<button type="button" class="btn btn-success" data-dismiss="modal">SI</button>*@
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="ModalSave" tabindex="-1" role="dialog" aria-labelledby="ModalSaveLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="ModalSaveLabel">
                            ¿Deseas guardar la orden de acondicionamiento?

                        </h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal">No</button>
                        <button type="button" class="btn btn-success" data-dismiss="modal" name="GuardarOP" onclick="Save()" id="GuardarOP">Si</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="container-fluid">
            <form id="formDespeje">
                <div class="modal fade" id="ModalDespeje" tabindex="-1" role="dialog" aria-labelledby="ModalDespejeLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="clearModalDespeje()">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                                <h5 class="modal-title" id="ModalDespejeLabel">
                                    Informe de desviación
                                    <input class="form-control" hidden="hidden" asp-for="@Model.PipelineClearanceOA.Activitie" id="PipelineClearance_Activitie" value="Se lleva a cabo el despeje de línea de acuerdo a los puntos anteriores '@(Model.Product)' de la planta '@(Model.Plant)'" />
                                </h5>
                            </div>
                            <div class="modal-body">
                                <div id="ModalSaveDespejeError" class="alert alert-danger" role="alert" hidden></div>
                                <label>Folio</label>
                                <input class="form-control" asp-for="@Model.PipelineClearanceOA.Bill" id="PipelineClearance_Bill" />
                                <label>Observaciones</label>
                                <textarea class="form-control" asp-for="@Model.PipelineClearanceOA.Notes" id="PipelineClearance_Notes"></textarea>
                            </div>
                            <div class="modal-footer">
                                <button id="btnDespejeNotificacionCancel" type="button" class="btn btn-danger" data-dismiss="modal" onclick="clearModalDespeje()">Cancelar</button>
                                <button id="btnDespejeNotificacionSave" type="button" class="btn btn-success" onclick="SaveDespeje(this);">Guardar</button>
                                <img id="imgLoadingDespejeNotificacion" src="~/img/spinning-loading.gif" style="padding-left:10px;display: none; width:50px;" />
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <div class="modal fade" id="ModalTNumber" tabindex="-1" role="dialog" aria-labelledby="ModalTNumberLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="ModalTNumberLabel">
                            ¿Deseas guardar el tour number?
                        </h5>
                    </div>
                    <div class="modal-body">
                        <div id="ModalTNumberError" class="alert alert-danger" role="alert" hidden></div>
                        <label>Tour number</label>
                        <input type="text" id="TxtTnumber" class="form-control" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" onclick="clearModalTNumber()">No</button>
                        <button type="button" class="btn btn-success" onclick="AddTnumber()">Si</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="ModalCloseOA" tabindex="-1" role="dialog" aria-labelledby="ModalCloseOALabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="ModalCloseOALabel">
                            ¿Deseas cerrar la orden de acondicionamiento?
                        </h5>
                    </div>
                    <div class="modal-body">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal">No</button>
                        <button type="button" class="btn btn-success" name="CloseOA" onclick="closeOA()" id="CloseOA">Si</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="ModalOpenOA" tabindex="-1" role="dialog" aria-labelledby="ModalOpenOALabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="ModalOpenOALabel">
                            ¿Deseas abrir la orden de acondicionamiento?
                        </h5>
                    </div>
                    <div class="modal-body">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal">No</button>
                        <button type="button" class="btn btn-success" name="OpenOA" onclick="OpenOA()" id="OpenOA">Si</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="ModalCloseOASimple" tabindex="-1" role="dialog" aria-labelledby="ModalCloseOALabelSimple" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h5 class="modal-title" id="ModalCloseOALabelSimple">
                            ¿Deseas continuar el proceso sin pipas?
                        </h5>
                    </div>
                    <div class="modal-body">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" id="btnCancelarCloseOASimple">No</button>
                        <button type="button" class="btn btn-success" name="CloseOASimple" onclick="CloseOpenOA(true)" id="CloseOASimple">Si</button>
                        <img id="imgCloseOASimple" src="~/img/spinning-loading.gif" style="padding-left:10px;display: none; width:50px;" />
                    </div>
                </div>
            </div>
        </div>


        <div class="modal fade" id="ModalCancel" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h5 class="modal-title" id="exampleModalLabel">
                            ¿Deseas solicitar la aprobación de la orden de acondicionamiento?

                        </h5>
                    </div>
                    <div class="modal-body">
                        <label>Motivo de cancelación</label>
                        <textarea id="ReasonRejectCancel" class="form-control">@Model.ReasonReject</textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" id="btnCancelModalCancel">No</button>
                        <button type="submit" class="btn btn-success" onclick="CancelPro(this);" id="Cancel">Si</button>
                        <img id="imgLoadingCancelNotificacion" src="~/img/spinning-loading.gif" style="padding-left:10px;display: none; width:50px;" />
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="ModalCancelApprove" tabindex="-1" role="dialog" aria-labelledby="ModalCancelApproveLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h5 class="modal-title" id="ModalCancelApproveLabel">
                            ¿Deseas aprobar o rechazar la solicitud de la orden de acondicionamiento?
                        </h5>
                    </div>
                    <div class="modal-body">
                        <label>Motivo de cancelación</label>
                        <textarea id="ReasonRejectCancelApprove" class="form-control">@Model.ReasonReject</textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" onclick="CancelReject(this)" id="btnRejectCancel">Rechazar</button>
                        <img id="imgLoadingCancelAproveNotificacion" src="~/img/spinning-loading.gif" style="padding-left:10px;display: none; width:50px;" />
                        <button type="submit" class="btn btn-success" onclick="CancelApprove(this)" id="btnApproveCancel">Aceptar</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="ModalMensajes" tabindex="-1" role="dialog" aria-labelledby="ModalMensajesLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div style="" class="modal-content">
                    <div class="modal-header">
                        <h5 style="font-size:30px" class="modal-title" id="ModalMensajesLabel">
                            Error
                        </h5>
                    </div>
                    <div style="font-size:20px" class="modal-body" id="mbody">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal">OK</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade bd-example-modal-lg" id="ModalSpinner" data-backdrop="static" data-keyboard="false" tabindex="-1">
            <div class="modal-dialog modal-sm">
                <div class="modal-content" style="width: 48px">
                    <span class="fa fa-spinner fa-spin fa-3x"></span>
                </div>
            </div>
        </div>

        <form method="post" enctype="multipart/form-data" asp-controller="ConditioningOrder" asp-action="Upload">
            <div class="modal fade" id="modal-popup" role="dialog" aria-labelledby="modal-popupLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="ModalSaveLabel">
                                ¿Confirmas que la información del checkList manual es válida?
                                <a href="~/Files/5e45f800-9209-4415-ab9a-3bf0019c04c9.pdf"></a>
                            </h5>
                        </div>
                        <div class="modal-body">
                            @{
                                Html.RenderPartial("_FileUpload", Model);
                            }
                            <input id="flagSavedFileCheckList" value="false" hidden />
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" onclick="CloseModalFile()">No</button>
                            <button type="button" class="btn btn-success" data-dismiss="modal" name="Guardar" onclick="SaveChecklistManual($('#StepFile').val()); return false;" id="Guardar">Si</button>
                        </div>
                    </div>
                </div>
            </div>
            @*///modal checkList*@
            <div class="modal fade" id="modal-checklist-Web" role="dialog" aria-labelledby="modal-checklist-Web" aria-hidden="true">
                <div class="modal-dialog" role="document" style="width:800px;">
                    <div class="modal-content" style="width:800px;">
                        <div class="modal-header">
                            <h5 class="modal-title-checklist-Web" id="Modal-checklist-Web">
                                ¿Confirmas que la información del checkList web es válida?

                            </h5>
                        </div>
                        <div class="modal-body">
                            <div id="checklist-WebDiv">
                                @{
                                    Html.RenderPartial("_CheckListRelationship", Model);
                                }
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" data-dismiss="modal">No</button>
                            <button type="button" class="btn btn-success" data-dismiss="modal" name="Guardar" onclick="SaveTourNumberPipeNumberRel(); return false;" id="GuardarRel">Si</button>
                        </div>
                    </div>
                </div>
            </div>

        </form>

        <div class="modal fade" id="ModalReleaseFalse" tabindex="-1" role="dialog" aria-labelledby="ModalRelease" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="cancelarRechazar()">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h5 class="modal-title" id="ModalSaveLabel">
                            ¿Esta seguro de dictaminar como rechazada la orden de distribución?
                        </h5>
                        <input id="pipeIndex" hidden />
                        <input id="tourIndex" hidden />
                    </div>
                    <div class="modal-body">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" onclick="cancelarRechazar()">No</button>
                        <button type="button" class="btn btn-success" onclick="rechazar(); return false;">Si</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="ModalSearchCheckList" tabindex="-1" role="dialog" aria-labelledby="ModalSearchCheckListLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header" style="border-bottom: none!important;">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true" style="font-size: 25px!important;">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" style="height: 550px; overflow: auto;">
                        <div class="table-responsive" id="showChecklist">
                            @{
                                Html.RenderPartial("_SerchCheckList", Model);
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="ModalMensajesRelease" tabindex="-1" role="dialog" aria-labelledby="ModalMensajesRelease" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div style="" class="modal-content">
                    <div class="modal-header">
                        <h5 style="font-size:30px" class="modal-title" id="ModalMensajesLabelRelease">
                            Error
                        </h5>
                    </div>
                    <div style="font-size:20px" class="modal-body" id="mbodyRelease">
                    </div>
                    <div class="modal-footer">
                        <button type="button" id="BtnsuccessRelease" class="btn btn-success" data-dismiss="modal">SI</button>
                        <button type="button" id="BtndangerRelease" class="btn btn-danger" data-dismiss="modal">NO</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @section Styles {
    <link href="~/plugins/bootstrap-calendar/css/bootstrap_calendar.css" rel="stylesheet" />
    <link href="~/plugins/bootstrap-combobox/css/bootstrap-combobox.css" rel="stylesheet" />
    <link href="~/plugins/bootstrap-select/bootstrap-select.css" rel="stylesheet" />
    <link href="~/plugins/bootstrap-wizard/css/bwizard.min.css" rel="stylesheet" />

    <link href="~/plugins/DataTables/media/css/dataTables.bootstrap.min.css" rel="stylesheet" />
    <link href="~/plugins/DataTables/extensions/Responsive/css/responsive.bootstrap.min.css" rel="stylesheet" />
    <link href="~/plugins/DataTables/extensions/Buttons/css/buttons.bootstrap.min.css" rel="stylesheet" />
    <link href="~/plugins/font-awesome/5.1/css/all.css" rel="stylesheet" />

    <link href="~/plugins/gritter/css/jquery.gritter.css" rel="stylesheet" />
    <link href="~/plugins/select2/dist/css/select2.min.css" rel="stylesheet" />

    <link href="~/css/conditioning-order.css" rel="stylesheet" />
    <link href="~/plugins/jquery/jquery.dataTables.min.css" rel="stylesheet" />
    <link href="~/plugins/dropzone/dropzone.min.css" rel="stylesheet" />
    }

    @section scripts {
    <environment names="Development,Staging,Production">
        <script src="~/plugins/bootstrap-calendar/js/bootstrap_calendar.min.js"></script>
        <script src="~/plugins/bootstrap-combobox/js/bootstrap-combobox.js"></script>
        <script src="~/plugins/bootstrap-select/bootstrap-select.js"></script>
        <script src="~/plugins/select2/dist/js/select2.min.js"></script>

        <script src="~/plugins/bootstrap-wizard/js/bwizard.min.js"></script>
        <script src="~/js/conditioning-order/conditioning-order-form-wizards.js"></script>

        <script src="~/plugins/bootbox/js/bootbox.all.min.js"></script>
        <script src="~/plugins/gritter/js/jquery.gritter.js"></script>

        <script src="~/plugins/DataTables/media/js/datetime.js"></script>
        <script src="~/plugins/DataTables/media/js/moment.min.js"></script>
        <script src="~/plugins/dropzone/dropzone.min.js"></script>

        <script src="~/js/demo.min.js"></script>
        <script src="~/js/apps.min.js"></script>
        <script src="~/js/linde.js"></script>
    </environment>

    <script>
        $(".accordion-toggle").click(function () {
            if ($(this).find("i").hasClass("fa-minus-circle")) {
                $(this).find("i").removeClass("fa-minus-circle").addClass("fa-plus-circle");
            } else {
                $(this).find("i").removeClass("fa-plus-circle").addClass("fa-minus-circle");

            }

        });
        Dropzone.autoDiscover = false;
        var myDropzone;
        var loadingWizard = true;

        $(function () {
            $(document).ready(function () {
                App.init();
                Demo.init();
                myDropzone = new Dropzone("#divDropzone", {
                    url: "/ConditioningOrder/SaveCustomerFiles",
                    addRemoveLinks: true,
                    uploadMultiple: false,
                    parallelUploads: 5,
                    dictRemoveFile: "Eliminar",
                    dictCancelUpload: "Cancelar",
                    dictUploadCanceled: "Cancelado",
                    dictCancelUploadConfirmation: "¿Esta seguro de cancelar la carga?",
                    acceptedFiles: ".pdf",
                    maxFilesize: 5,
                    maxFiles: 10,
                    timeout: 0,
                    dictFileTooBig: "El tamaño permitido son 5 MB",
                    dictInvalidFileType: "Formato incorrecto",
                    dictMaxFilesExceeded: "Excedio el número de archivos permitidos"
                });
                myDropzone.on("sending", function (file, xhr, formData) {
                    formData.append("__RequestVerificationToken", $('input[name=__RequestVerificationToken]').val());
                    formData.append("Id", @Model.Id);
                    formData.append("Tournumber", $("#dropzoneTournumber").val());
                    formData.append("DistributionBatch", $("#dropzoneDistributionBatch").val());
                    formData.append("PipeNumber", $("#dropzonePipeNumber").val());
                    formData.append("Tank", '@Model.Tank');
                    formData.append("TournumberIndex", $("#dropzoneTournumberIndex").val());
                    formData.append("PipeIndex", $("#dropzonePipeIndex").val());
                });
                myDropzone.on("complete", function (file) {
                    if (!!!file) {
                        return false;
                    } else if (file.status == 'success') {
                        const response = JSON.parse(file.xhr.responseText);
                        const currentIndex = $(`#table-5-customers-Upload-${response.tournumberIndex}-${response.pipeIndex} tr`).length;
                        addRowToTableFile(currentIndex, file.name, response.tournumber, response.distribuitionBatch, response.pipeNumber, response.tournumberIndex, response.pipeIndex, response.fileNameGuid);
                    }
                });
                //inicializa
                $('#BtnCancelarApprove').prop('hidden', true);
                ///cuando se encuentra en cancelación
                if ($("#Status").val() === "OA-En cancelación") {
                    $('#BtnCancelarApprove').prop('hidden', false);
                    $('#BtnCancelar').prop('hidden', true);
                }
                ///cuando ya se dictaminó
                if ($("#Status").val() === "OA-Cancelada" || $("#Status").val() === "OA-Liberada" || $("#Status").val() === "OA-Rechazada") {
                    $('#BtnCancelar').prop('hidden', true);
                    $('#BtnCancelarApprove').prop('hidden', true);
                    $('#Guardar').prop('hidden', true);

                }

                if ($("#Status").val() === "OA-En proceso") {
                    $('#btnOpenOrder').prop('hidden', true);
                }

                $('.selectpicker').selectpicker();
                PageDemo.init();

                $(".date-format").datepicker({
                    dateFormat: 'yy/mm/dd'
                });
                $('#ReasonReject').val();

                loadSavedData();

                bindEvents();

                // MEG set active tab ERROR SAVE IN LOAD PAGE
                var step = isNullOrEmpty(@Model.StepSaved) ? 0 : @Model.StepSaved
                step = step > 0 ? (step - 1) : 0
                $("#wizard").bwizard("show", step)
                loadingWizard = false;
                if ($("#Status").val() === "OA-Liberada" || $("#Status").val() === "OA-Cancelada") {
                    $('#btnOpenOrder').removeAttr('hidden');
                    enableStep3(true);
                    enableStep4(true);
                }
                if ($("#IsCancelled").val() === "True") {
                    $("#btnOpenOrder").prop("hidden", true);
                }
                $('#modal-popup').on('hidden.bs.modal', function () {
                    dismissFileCheckList();
                });
                $("#btnPrevious").click(function () {
                    if (+$("#StepSaved").val() >= 1) {
                        $(".previous").click();
                    }
                });
                $("#btnNext").click(function () {
                    if (+$("#StepSaved").val() <= 6) {
                        $(".next").click();
                    }
                });
                $("#BtnCancelar").click(function () {
                    $("#ModalCancel").modal({
                        backdrop: 'static',
                        keyboard: false
                    }, "show");
                });
                $("#BtnCancelarApprove").click(function () {
                    $("#ModalCancelApprove").modal({
                        backdrop: 'static',
                        keyboard: false
                    }, "show");
                });
                $("#btnCloseOrderSimple").click(function () {
                    $("#ModalCloseOASimple").modal({
                        backdrop: 'static',
                        keyboard: false
                    }, "show");
                });
                if ($("#Status").val() === "OA-En proceso sin pipas") {
                    enableStep3(true);
                    enableStep4(true);
                }
                validateTable4();
            });
        })

        function bindEvents() {
            // Table 1
            $(".yes-no-analytic-equipment").each(function () {
                $(this).change(function () {
                    let controlValue = $(this).attr("data-linde-control-value")
                    let controlGroup = $(this).attr("data-linde-control-group")
                    let controlId = $(this).attr("data-linde-control-id")

                    if (controlValue == "true")
                    {
                        if ($(this).is(':checked')) {
                            $('#' + controlGroup + 'CheckFalse' + controlId).prop('checked', false);

                            var reviewedDate = new Date(Date.now());
                            $('#' + controlGroup + 'ReviewedBy' + controlId).val("@userFirstName")
                            $('#' + controlGroup + 'ReviewedDate' + controlId).val(getDateString(reviewedDate))
                            $('#' + controlGroup + 'ReviewedSignature' + controlId).html(getSignature("@userFirstName", reviewedDate))

                            $('#' + controlGroup + 'Notes' + controlId).val('')
                            $('#' + controlGroup + 'Notes' + controlId).prop("disabled", true)

                            if(validateStep1()) {
                                $('#ModalMensajesLabel').html('Infomación completada')
                                $('#mbody').text("La información a sido completada en este paso, al avanzar la información sera inalterable");
                                $('#ModalMensajes').modal('show');
                            }
                        }
                        else {
                            $('#' + controlGroup + 'ReviewedBy' + controlId).val('')
                            $('#' + controlGroup + 'ReviewedDate' + controlId).val('')
                            $('#' + controlGroup + 'ReviewedSignature' + controlId).html("")

                            $('#' + controlGroup + 'Notes' + controlId).val('')
                            $('#' + controlGroup + 'Notes' + controlId).prop("disabled", true)
                        }
                    }
                    else
                    {
                        if ($(this).is(':checked')) {
                            $('#' + controlGroup + 'CheckTrue' + controlId).prop('checked', false);

                            var reviewedDate = new Date(Date.now());
                            $('#' + controlGroup + 'ReviewedBy' + controlId).val("@userFirstName")
                            $('#' + controlGroup + 'ReviewedDate' + controlId).val(getDateString(reviewedDate))
                            $('#' + controlGroup + 'ReviewedSignature' + controlId).html(getSignature("@userFirstName", reviewedDate))

                            $('#' + controlGroup + 'Notes' + controlId).prop("disabled", false)
                        }
                        else {
                            $('#' + controlGroup + 'ReviewedBy' + controlId).val('')
                            $('#' + controlGroup + 'ReviewedDate' + controlId).val('')
                            $('#' + controlGroup + 'ReviewedSignature' + controlId).html("")

                            $('#' + controlGroup + 'Notes' + controlId).val('')
                            $('#' + controlGroup + 'Notes' + controlId).prop("disabled", true)
                        }
                    }
                })
            });

            // Table 2
            $(".yes-no-scalesflows").each(function () {
                $(this).change(function () {
                    let controlValue = $(this).attr("data-linde-control-value")
                    let controlGroup = $(this).attr("data-linde-control-group")
                    let controlId = $(this).attr("data-linde-control-id")

                    if (controlValue == "true")
                    {
                        if ($(this).is(':checked')) {
                            $('#' + controlGroup + 'CheckFalse' + controlId).prop('checked', false);

                            var reviewedDate = new Date(Date.now());
                            $('#' + controlGroup + 'ReviewedBy' + controlId).val("@userFirstName")
                            $('#' + controlGroup + 'ReviewedDate' + controlId).val(getDate(reviewedDate) + 'T' + getDateTime(reviewedDate))
                            $('#' + controlGroup + 'ReviewedSignature' + controlId).html(getSignature("@userFirstName", reviewedDate))

                            if(validateStep2()) {
                                $('#ModalMensajesLabel').html('Infomación completada')
                                $('#mbody').text("La información a sido completada en este paso, al avanzar la información sera inalterable");
                                $('#ModalMensajes').modal('show');
                            }
                        }
                        else {
                            $('#' + controlGroup + 'ReviewedBy' + controlId).val('')
                            $('#' + controlGroup + 'ReviewedDate' + controlId).val('')
                            $('#' + controlGroup + 'ReviewedSignature' + controlId).html("")
                        }
                    }
                    else
                    {
                        if ($(this).is(':checked')) {
                            $('#' + controlGroup + 'CheckTrue' + controlId).prop('checked', false);

                            var reviewedDate = new Date(Date.now());
                            $('#' + controlGroup + 'ReviewedBy' + controlId).val("@userFirstName")
                            $('#' + controlGroup + 'ReviewedDate' + controlId).val(getDateString(reviewedDate))
                            $('#' + controlGroup + 'ReviewedSignature' + controlId).html(getSignature("@userFirstName", reviewedDate))
                        }
                        else {
                            $('#' + controlGroup + 'ReviewedBy' + controlId).val('')
                            $('#' + controlGroup + 'ReviewedDate' + controlId).val('')
                            $('#' + controlGroup + 'ReviewedSignature' + controlId).html("")
                        }
                    }
                })
            });
            ValidateScales();
            // Table 3
            $("#PipelineClearanceCheckTrue").change(function () {
                if ($(this).is(':checked')) {
                    $('#PipelineClearanceCheckFalse').prop('checked', false);

                    var reviewedDate = new Date(Date.now());
                    $('#PipelineClearanceReviewedBy').val("@userFirstName")
                    $('#PipelineClearanceReviewedDate').val(getDateString(reviewedDate))
                    $('#PipelineClearanceReviewedSignature').html(getSignature("@userFirstName", reviewedDate))

                    if(validateStep2()) {
                        $('#ModalMensajesLabel').html('Información completado')
                        $('#mbody').text("La información a sido completada en este paso, al avanzar la información sera inalterable");
                        $('#ModalMensajes').modal('show');
                    }
                }
                else {
                    $('#PipelineClearanceReviewedBy').val('')
                    $('#PipelineClearanceReviewedDate').val('')
                    $('#PipelineClearanceReviewedSignature').html("")
                }
            });
            $("#PipelineClearanceCheckFalse").change(function () {
                if ($(this).is(':checked')) {
                    $('#PipelineClearanceCheckTrue').prop('checked', false);

                    var reviewedDate = new Date(Date.now());
                    $('#PipelineClearanceReviewedBy').val("@userFirstName")
                    $('#PipelineClearanceReviewedDate').val(getDateString(reviewedDate))
                    $('#PipelineClearanceReviewedSignature').html(getSignature("@userFirstName", reviewedDate));

                    // abrir modal para capturar folio y observaciones y guardar, actualizar tabla de detalles
                    $('#PipelineClearance_Notes').val("")
                    $('#PipelineClearance_Bill').val("")
                    $('#ModalDespeje').modal({
                        backdrop: 'static',
                        keyboard: false
                    }, 'show');
                } else {
                    $('#PipelineClearanceReviewedBy').val('')
                    $('#PipelineClearanceReviewedDate').val('')
                    $('#PipelineClearanceReviewedSignature').html("")
                }
            });

            // Table 5
            bindEventsTable5()
        }

        function loadSavedData() {
            if (@Model.StepSaved >= 1) {
                $('#step1').find('input').each(function () {
                    $(this).prop("disabled", true);
                });
            }
            if (@Model.StepSaved >= 2) {
                $('#step2').find('input').each(function () {
                    $(this).prop("disabled", true);
                });

                $("#SelectedScalesFlowMeters").prop("disabled", true);
                $("#BtnScalesFlowMeters").prop("disabled", true);

            }

            ///JJGR
            if (@Model.StepSaved >= 3) {
                $('#step3').find('button').each(function () {
                    ///frezze for status JJGR
                    if ($("#Status").val() === "OA-Cancelada") {
                        var name = $(this).attr('id');
                    }
                });
            }


            // Table 1
            $("#table-1").find("tbody tr").each(function (index) {
                let checked = $(this).find("#AnalyticEquipmentIsCalibrated"+index).val()

                if(checked === "True")
                {
                    $(this).find("#AnalyticEquipmentCheckTrue"+index).prop("checked", true)
                    $(this).find("#AnalyticEquipmentCheckFalse"+index).prop("checked", false)
                }
                else if(checked === "False")
                {
                    $(this).find("#AnalyticEquipmentCheckTrue"+index).prop("checked", false)
                    $(this).find("#AnalyticEquipmentCheckFalse"+index).prop("checked", true)
                }

                let reviewedBy = $(this).find("#AnalyticEquipmentReviewedBy"+index).val()
                let reviewedDateString = $(this).find("#AnalyticEquipmentReviewedDate"+index).val()
                let reviewedDate = !isNullOrEmpty(reviewedDateString) ? new Date(reviewedDateString) : null
                $(this).find("#AnalyticEquipmentReviewedSignature"+index).html(getSignature(reviewedBy, reviewedDate))
            });

            // Table 2
            $("#table-2").find("tbody tr").each(function (index) {
                let checked = $(this).find("#ScalesflowsIsCalibrated"+index).val()

                if(checked === "True")
                {
                    $(this).find("#ScalesflowsCheckTrue"+index).prop("checked", true)
                    $(this).find("#ScalesflowsCheckFalse"+index).prop("checked", false)
                }
                else if(checked === "False")
                {
                    $(this).find("#ScalesflowsCheckTrue"+index).prop("checked", false)
                    $(this).find("#ScalesflowsCheckFalse"+index).prop("checked", true)
                }

                let reviewedBy = $(this).find("#ScalesflowsReviewedBy"+index).val()
                let reviewedDateString = $(this).find("#ScalesflowsReviewedDate"+index).val()
                let reviewedDate = !isNullOrEmpty(reviewedDateString) ? new Date(reviewedDateString) : null
                $(this).find("#ScalesflowsReviewedSignature"+index).html(getSignature(reviewedBy, reviewedDate))
            });

            // Table 3
            let checkedPipelineClearanceInCompliance = $("#PipelineClearanceInCompliance").val()
            if(checkedPipelineClearanceInCompliance === "True")
            {
                $("#PipelineClearanceCheckTrue").prop("checked", true)
                $("#PipelineClearanceCheckFalse").prop("checked", false)
            }
            else if(checkedPipelineClearanceInCompliance === "False")
            {
                $("#PipelineClearanceCheckTrue").prop("checked", false)
                $("#PipelineClearanceCheckFalse").prop("checked", true)
            }

            let reviewedBy = $("#PipelineClearanceReviewedBy").val()
            let reviewedDateString = $("#PipelineClearanceReviewedDate").val()
            let reviewedDate = !isNullOrEmpty(reviewedDateString) ? new Date(reviewedDateString) : null
            $('#PipelineClearanceReviewedSignature').html(getSignature(reviewedBy, reviewedDate))

            // Table 4
            loadSavedDataTable4()

            // Table 5
            loadSavedDataTable5()

            // Table 6
            $("#table-6").find("tbody tr").each(function (index) {
                let reviewedBy = $(this).find("#PerformanceListReviewedBy"+index).val()
                let reviewedDateString = $(this).find("#PerformanceListReviewedDate"+index).val()
                let reviewedDate = !isNullOrEmpty(reviewedDateString) ? new Date(reviewedDateString) : null
                let reviewedSignature = getSignature(reviewedBy, reviewedDate)
                $(this).find("#PerformanceListReviewedSignature"+index).html(reviewedSignature)

                if (!isNullOrEmpty(reviewedBy) || !isNullOrEmpty(reviewedDateString)) {
                    $(this).find("#btnPerformanceListReviewedSignature"+index).prop('hidden', true)
                    $(this).find("#PerformanceListNotes" + index).prop('disabled', true)
                }
            });

            // Table 7
            let releasedBy = $("#ReleasedBy").val()
            let releasedDateString = $("#ReleasedDate").val()
            let releasedDate = !isNullOrEmpty(releasedDateString) ? new Date(releasedDateString) : null
            let releasedSignature = getSignature(releasedBy, releasedDate)
            $('#ReleasedSignature').html(releasedSignature)

            if (!isNullOrEmpty(releasedBy) || !isNullOrEmpty(releasedDateString)) {
                $('#btnReleasedSignature').prop('hidden', true)
            }
            if (isNullOrEmpty(releasedBy) || isNullOrEmpty(releasedDateString)) {
                $('#btnCloseOrder').prop("disabled", true);
                $("#btnCloseOrder").attr("hidden", true);
                $('#btnOpenOrder').prop("disabled", true);
                $("#btnOpenOrder").attr("hidden", true);
            }

            if (@Model.StepSaved >= 6) {
                $('#step1').find('button').each(function () {
                    $(this).prop("disabled", true);
                });
                $('#step2').find('button').each(function () {
                    $(this).prop("disabled", true);
                });
                $('#step3').find('button').each(function () {
                    $(this).prop("disabled", true);
                });
                $('#step5').find('button').each(function () {
                    $(this).prop("disabled", true);
                });
                $('#step6').find('button').each(function () {
                    //jjgr
                    if ($("#Status").val() === "OA-Cancelada") {
                        var name = $(this).attr('id');
                        if (name != "btnOpenOrder" || name != "btnCloseOrder") {
                            $(this).prop("disabled", true);
                        }
                    }
                });

                $('#step1').find('input').each(function () {
                    $(this).prop("disabled", true);
                });
                $('#step2').find('input').each(function () {
                    $(this).prop("disabled", true);
                });
                $('#step3').find('input').each(function () {
                    $(this).prop("disabled", true);
                });
                $('#step5').find('input').each(function () {
                    $(this).prop("disabled", true);
                });
                $('#step6').find('input').each(function () {
                    $(this).prop("disabled", true);
                });
                enableStep4(true);
                $('#btnOpenOrder').prop("disabled", false);
                $("#btnCloseOrder").attr("hidden", true);
            }
            if ($("#Status").val() === "OA-Cancelada" || $("#Status").val() === "OA-En cancelación") {
                $("#btnReleasedSignature").attr("hidden", true);
            }
        }

        var ValidateScales = function(){
            let isValid = true;
             $("#table-2").find("tbody tr").each(function (index) {
                if ($("#ScalesflowsCheckTrue" + index).is(':checked') && ($("#PipelineClearanceCheckTrue").is(':checked') || $("#PipelineClearanceCheckFalse").is(':checked'))) {
                    isValid = true
                }
                else {
                    isValid = false;
                    $("#PipelineClearanceCheckTrue").prop("disabled", false)
                    $("#PipelineClearanceCheckFalse").prop("disabled", false)
                }
             });
             return isValid;
        }

        var SaveDespeje = function (event) {
            if ( isNullOrEmpty($('#PipelineClearance_Notes').val()) || isNullOrEmpty($('#PipelineClearance_Bill').val()) )
            {
                $('#PipelineClearance_Notes').addClass("border-danger")
                $('#PipelineClearance_Bill').addClass("border-danger")
                $('#ModalSaveDespejeError').html('Folio y Observaciones son requeridos es requirido.')
                $('#ModalSaveDespejeError').removeAttr('hidden')
                return
            }
            $("#btnDespejeNotificacionCancel").prop("disabled", true);
            $("#btnDespejeNotificacionSave").prop("hidden", true);
            $("#imgLoadingDespejeNotificacion").show();
            $.ajax({
                type: "POST",
                url: "/ConditioningOrder/SaveDespeje/",
                data: {
                    "ConditioningOrderId": @Model.Id,
                    "Bill": $('#PipelineClearance_Bill').val(),
                    "Notes": $('#PipelineClearance_Notes').val(),
                    "ReviewedBy": $('#PipelineClearanceReviewedBy').val(),
                    "ReviewedDate": $('#PipelineClearanceReviewedDate').val(),
                    "InCompliance": false,
                    "Activitie": $('#PipelineClearance_Activitie').val(),
                    "SelectedPlantFilter": $('#SelectedPlantFilter').val(),
                    "ProductionOrderId": @Model.ProductionOrderId,
                    "PlantId": '@Model.PlantId',
                    "LotProd": '@Model.LotProd',
                    "SelectedPlantFilter": $('#Product').val(),
                },
                dataType: "json",
                success: function (response) {
                    if (response.message) {
                        $.gritter.add({
                            title: "Mensaje",
                            text: response.message,
                            class_name: "gritter-light"
                        });
                    }

                    $('#ModalDespeje').modal('hide')
                    clearModalDespeje()

                    $("#PipelineClearanceCheckTrue").prop("disabled", true)
                    $("#PipelineClearanceCheckFalse").prop("disabled", true)

                    ShowDetailDL();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error(jqXHR);
                    $.gritter.add({
                        title: "Error",
                        text: "Ocurrio un error, por favor comunicate con el Administrador",
                        class_name: "gritter-light"
                    });
                },
                complete: function (jqXHR, textStatus) {
                    $("#btnDespejeNotificacionCancel").prop("disabled", false);
                    $("#btnDespejeNotificacionSave").prop("hidden", false);
                    $("#imgLoadingDespejeNotificacion").hide();
                }
            });
        }

        var clearModalDespeje = function() {
            $('#PipelineClearanceCheckFalse').prop('checked', false)
            $('#PipelineClearanceReviewedSignature').html('')

            $('#ModalSaveDespejeError').html('')
            $('#ModalSaveDespejeError')
            $('#PipelineClearance_Notes').removeClass("border-danger")
            $('#PipelineClearance_Bill').removeClass("border-danger")
            $('#PipelineClearance_Notes').val('')
            $('#PipelineClearance_Bill').val('')
        }

        var ShowDetailDL = function (event) {
            //Despeje de línea historial
            $.ajax({
                type: "GET",
                url: "/ConditioningOrder/GetDetailDL/?Id=@Model.Id",
                success: function (partialViewResult) {
                    $("#table3-detailInfo").html(partialViewResult);
                    $('#table3-detailInfo').prop('hidden', false);

                    // load signature and second notes
                    $("#table-3Detail").find("tbody tr").each(function (index) {
                        let reviewedBy = $(this).find("#DeviationReportReviewedBySecond"+index).val()
                        let reviewedDateString = $(this).find("#DeviationReportReviewedDateSecond"+index).val()
                        let reviewedDate = !isNullOrEmpty(reviewedDateString) ? new Date(reviewedDateString) : null
                        var reviewedSignature = getSignature(reviewedBy, reviewedDate)
                        $(this).find("#DeviationReportReviewedSecondSignature"+index).html(reviewedSignature)

                        if (!isNullOrEmpty(reviewedBy) || !isNullOrEmpty(reviewedDateString)) {
                            $(this).find('#btnDeviationReportReviewedSecondSignature'+index).prop('hidden', true)
                        }
                    });
                }
            });
        }

        var HiddeDetailDL = function (event) {
            $('#table3-detailInfo').prop('hidden', true);
        }

        function signDeviationReport(index) {
            var reviewedDate = new Date(Date.now())
            $('#DeviationReportReviewedBySecond'+index).val("@userFirstName")
            $('#DeviationReportReviewedDateSecond'+index).val(getDateString(reviewedDate))
            $('#DeviationReportReviewedSecondSignature'+index).html(getSignature("@userFirstName", reviewedDate))

            Save()

            $('#DeviationReportNotesSecond'+index).prop('disabled', false)
            $("#PipelineClearanceCheckTrue").prop("disabled", false)
            $("#PipelineClearanceCheckFalse").prop("disabled", false)
            $('#btnDeviationReportReviewedSecondSignature'+index).prop('hidden', true)
        }

        var ShowHistoryState = function (event) {
            $('#table-HistoryState').prop('hidden', false);
            //Despeje de línea historial
            var tableDLhistorial = $("#table-HistoryState").DataTable({
                "ajax": {
                    "url": "/ConditioningOrder/GetHistoryStateDetail/?Id=@Model.Id",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "user" },
                    { "data": "date", "render": function ( data, type, row ) {
                        return getDate(new Date(data)) + ' ' + getDateTime(new Date(data))
                    } },
                    { "data": "state" },
                ],
                destroy: true,
                pageLength: 20,
                orderCellsTop: true,
                fixedHeader: true,
                bLengthChange: false,
                bFilter: true,
                bAutoWidth: false,
                bPaginate: false,
                searching: false,
                dom: 'Bfrtip',
                "bInfo": false,
                buttons: [
                    {
                        extend: 'pdf',
                        className: 'hide',
                        charset: 'utf-8',
                        bom: true
                    }
                ],
                "language": {
                    "search": '<i class="fa fa-filter" aria-hidden="true"></i>Buscar',
                    "searchPlaceholder": '@searchPlaceholder',
                    "emptyTable": "@emptyTable",
                    "lengthMenu": "@lengthMenu",
                    "info": "@info",
                    "loadingRecords": "@loadingRecords",
                    "processing": "@processing",
                    "zeroRecords": "@zeroRecords",
                    "infoEmpty": "@infoEmpty",
                    "infoFiltered": "@infoFiltered",
                },
                "order": [],
                "columnDefs": [{
                    "targets": 'no-sort',
                    "orderable": false,
                }]

            });

        }

        var HiddeStateHistory  = function (event) {
            $('#table-HistoryState').prop('hidden', true);
        }

        var CancelPro = function (event) {
            $("#btnCancelModalCancel").prop("disabled", true);
            $("#Cancel").prop("hidden", true);
            $("#imgLoadingCancelNotificacion").show();
            $.ajax({
                async: true,
                type: "POST",
                url: "/ConditioningOrder/Cancel/",
                data: {
                    __RequestVerificationToken: $("[name='__RequestVerificationToken']").val(),
                    "Plant": $("#Plant").val(),
                    "ReasonReject": $("#ReasonRejectCancel").val(),
                    "Id": @Model.Id,
                    "LotProd": '@Model.LotProd',
                    "PlantId": '@Model.PlantId',
                    "ProductionOrderId": '@Model.ProductionOrderId'
                },
                dataType: "json",
                success: function (response) {
                    if (response.result === "Ok") {
                        $('#StatusLbl2').text(response.status);
                        $('#BtnCancelar').prop('hidden', true);
                        $('#BtnCancelarApprove').prop('hidden', false);
                        $("#btnCloseOrderSimple").attr("hidden", true);
                        $("#btnCloseOrder").attr("hidden", true);
                        $('#Guardar').attr('hidden', true);
                        $("#btnReleasedSignature").attr("hidden", true);
                        $("#ReasonRejectCancelApprove").val($("#ReasonRejectCancel").val());
                    }
                    if (!!response.message) {
                        $.gritter.add({
                            title: "Mensaje",
                            text: response.message,
                            class_name: "gritter-light"
                        });
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error(jqXHR);
                    $.gritter.add({
                        title: "Error",
                        text: "Ocurrio un error, por favor comunicate con el Administrador",
                        class_name: "gritter-light"
                    });
                },
                complete: function (jqXHR, textStatus) {
                    $("#btnCancelModalCancel").prop("disabled", false);
                    $("#Cancel").prop("hidden", false);
                    $("#imgLoadingCancelNotificacion").hide();
                    $('#ModalCancel').modal('hide');
                }
            });
        }

        var CancelApprove= function (event) {
            $("#btnRejectCancel").prop("disabled", true);
            $("#btnApproveCancel").prop("hidden", true);
            $("#imgLoadingCancelAproveNotificacion").show();
            $.ajax({
                async: true,
                type: "POST",
                url: "/ConditioningOrder/CancelApprove/",
                data: {
                    __RequestVerificationToken: $("[name='__RequestVerificationToken']").val(),
                    "PlantId": '@Model.PlantId',
                    "ReasonReject": $("#ReasonRejectCancelApprove").val(),
                    "Id": @Model.Id,
                    "LotProd": '@Model.LotProd',
                    "ProductionOrderId": '@Model.ProductionOrderId'
                },
                dataType: "json",
                success: function (response) {
                    if (response.result === "Ok") {
                        $('#StatusLbl2').text(response.status);
                        $('#BtnCancelarApprove').prop('hidden', true);
                        queryLogStatusOrder();
                    }
                    if (!!response.message) {
                        $.gritter.add({
                            title: "Mensaje",
                            text: response.message,
                            class_name: "gritter-light"
                        });
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error(jqXHR);
                    $.gritter.add({
                        title: "Error",
                        text: "Ocurrio un error, por favor comunicate con el Administrador",
                        class_name: "gritter-light"
                    });
                },
                complete: function (jqXHR, textStatus) {
                    $("#btnRejectCancel").prop("disabled", false);
                    $("#btnApproveCancel").prop("hidden", false);
                    $("#imgLoadingCancelAproveNotificacion").hide();
                    $('#ModalCancelApprove').modal('hide');
                }
            });
        }

        var CancelReject = function (event) {
            $("#btnRejectCancel").prop("hidden", true);
            $("#btnApproveCancel").prop("disabled", true);
            $("#imgLoadingCancelAproveNotificacion").show();
            $.ajax({
                async: true,
                type: "POST",
                url: "/ConditioningOrder/CancelReject/",
                data: {
                    __RequestVerificationToken: $("[name='__RequestVerificationToken']").val(),
                    "PlantId": '@Model.PlantId',
                    "ReasonReject": $("#ReasonRejectCancelApprove").val(),
                    "Id": @Model.Id,
                    "LotProd": '@Model.LotProd',
                    "ProductionOrderId": '@Model.ProductionOrderId'
                },
                dataType: "json",
                success: function (response) {
                    if (response.result === "Ok") {
                        $('#StatusLbl2').text(response.status);
                        $('#BtnCancelar').prop('hidden', false);
                        $('#BtnCancelarApprove').prop('hidden', true);
                        $('#Guardar').attr('hidden', false);
                        if (+$('#StepSaved').val() <= 3) {
                            $("#btnCloseOrderSimple").attr("hidden", false);
                        }
                        if (!!$("#ReleasedBy").val() && !!$("#ReleasedDate").val()) {
                            $("#btnCloseOrder").attr("hidden", false);
                        } else {
                            $("#btnReleasedSignature").attr("hidden", false);
                        }
                    }
                    if (!!response.message) {
                        $.gritter.add({
                            title: "Mensaje",
                            text: response.message,
                            class_name: "gritter-light"
                        });
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error(jqXHR);
                    $.gritter.add({
                        title: "Error",
                        text: "Ocurrio un error, por favor comunicate con el Administrador",
                        class_name: "gritter-light"
                    });
                },
                complete: function (jqXHR, textStatus) {
                    $("#btnRejectCancel").prop("hidden", false);
                    $("#btnApproveCancel").prop("disabled", false);
                    $("#imgLoadingCancelAproveNotificacion").hide();
                    $('#ModalCancelApprove').modal('hide');
                }
            });
        }

        var ShowHistory = function (event) {
            $('#table-HistoryNotes').prop('hidden', false);
            //Despeje de línea historial
            var tableDLhistorial = $("#table-HistoryNotes").DataTable({
                "ajax": {
                    "url": "/ConditioningOrder/GetHistoryDetail/?Id=@Model.ProductionOrderId",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "note" },
                    { "data": "source" },
                    { "data": "user" },
                    { "data": "date", "render": function ( data, type, row ) {
                        return getDate(new Date(data)) + ' ' + getDateTime(new Date(data))
                    } },
                ],
                destroy: true,
                pageLength: 20,
                orderCellsTop: true,
                fixedHeader: true,
                bLengthChange: false,
                bFilter: true,
                bAutoWidth: false,
                bPaginate: false,
                searching: false,
                dom: 'Bfrtip',
                "bInfo": false,
                buttons: [
                    {
                        extend: 'pdf',
                        className: 'hide',
                        charset: 'utf-8',
                        bom: true
                    }
                ],
                "language": {
                    "search": '<i class="fa fa-filter" aria-hidden="true"></i>Buscar',
                    "searchPlaceholder": '@searchPlaceholder',
                    "emptyTable": "@emptyTable",
                    "lengthMenu": "@lengthMenu",
                    "info": "@info",
                    "loadingRecords": "@loadingRecords",
                    "processing": "@processing",
                    "zeroRecords": "@zeroRecords",
                    "infoEmpty": "@infoEmpty",
                    "infoFiltered": "@infoFiltered",
                },
                "order": [],
                "columnDefs": [{
                    "targets": 'no-sort',
                    "orderable": false,
                }]

            });

        }

        var HiddeHistory = function (event) {
            $('#table-HistoryNotes').prop('hidden', true);
        }

        function refreshTNumber() {
            reloadTable4("true")
        }

        function ShowModalTNumber() {
            clearModalTNumber()
            $('#ModalTNumber').modal('show');
        }

        function clearModalTNumber() {
            $('#ModalTNumberError').html('')
            $('#ModalTNumberError').prop("hidden", true)
            $('#TxtTnumber').val('')
            $('#TxtTnumber').removeClass("border-danger")
        }

        function AddTnumber() {
            const response = Save();
            if (response.responseJSON.result !== "Ok") {
                ret = false
            }
            var number = $('#TxtTnumber').val()
            if(isNullOrEmpty(number)) {
                $('#ModalTNumberError').html('Tournumber es requirido.')
                $('#ModalTNumberError').removeAttr('hidden')
                $('#TxtTnumber').addClass("border-danger")
                return
            }

            let tournumbers = isNullOrEmpty($("#tournumber").val()) ? [] : $("#tournumber").val().split(',');
            if(tournumbers.indexOf(number) !== -1) {
                $('#ModalTNumberError').html('Tournumber ya ha sido agregado.')
                $('#ModalTNumberError').removeAttr('hidden')
                $('#TxtTnumber').addClass("border-danger")
                return
            }

            tournumbers.push(number);
            $("#tournumber").val(tournumbers.join(','))

            reloadTable4();
        }

        function RemoveTnumber(tournumber) {
            const response = Save();
            if (response.responseJSON.result !== "Ok") {
                ret = false
            }
            $('#numberModal').modal('hide')
            return $.ajax({
                type: "POST",
                url: "/ConditioningOrder/DeleteTourNumber/?number=" + tournumber + "&id=" + @Model.Id,
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response.result === "Ok") {
                        let tournumbers = ($("#tournumber").val() === '') ? [] : $("#tournumber").val().split(',')

                        while (tournumbers.indexOf(tournumber.toString()) !== -1)
                        {
                            tournumbers.splice(tournumbers.indexOf(tournumber.toString()), 1)
                        }
                        $("#tournumber").val(tournumbers.join(','));
                        reloadTable4(true, true, response.message);
                    }
                    else {
                        $.gritter.add({
                            title: "Ocurrió un error",
                            text: response.message,
                            class_name: "gritter-light"
                        })
                    }
                }
            })
        }

        function signEquipamentProcessesRecord(index) {
            if (isNullOrEmpty($('#EquipamentProcessesBay'+index).val())
                || isNullOrEmpty($('#EquipamentProcessesHoseDownload'+index).val()))
            {
                $('#ModalMensajesLabel').html('Error')
                $('#mbody').text("Selecciona Bahía y Manguera de descarga");
                $('#ModalMensajes').modal('show');
                return
            }

            let reviewedDate = new Date(Date.now())
            $('#EquipamentProcessesReviewedBy'+index).val("@userFirstName")
            $('#EquipamentProcessesReviewedDate'+index).val(getDateString(reviewedDate))
            $('#EquipamentProcessesReviewedSignature'+index).html(getSignature("@userFirstName", reviewedDate))
            $('#EquipamentProcessesBay'+index).prop("disabled", true)
            $('.selectpicker').selectpicker('refresh')
            $('#EquipamentProcessesHoseDownload'+index).prop("disabled", true)
            $('#btnEquipamentProcessesReviewedSignature' + index).prop('hidden', true)
            $(`#EquipamentProcessesNotes${index}`).attr("disabled", true);
        }

        async function signPipeFillingCustomerRecord(index, tourNumberIndex, pipeIndex, Name, tourNumber, pipeNumber, distributionBatch, tank) {
            if (!1 === $('#PipeFillingReleasedCheckTrue-' + tourNumberIndex + '-' + pipeIndex).prop("checked")
                && !1 === $('#PipeFillingReleasedCheckFalse-' + tourNumberIndex + '-' + pipeIndex).prop("checked")) {
                $('#ModalMensajesLabel').html('Error')
                $('#mbody').text("Capture dictamen liberado o rechazado");
                $('#ModalMensajes').modal('show');
                return
            } else if (!!!$(`#PipeFillingCheckListStatus-${tourNumberIndex}-${pipeIndex}`).val()) {
                $('#ModalMensajesLabel').html('Error')
                $('#mbody').text("Para firmar y crear el certificado es requerido relacionar la primera parte del checklist.");
                $('#ModalMensajes').modal('show');
                return
            }
            ///JJGR
            $("#pipeFilling-container .tab-content .tab-pane").each(function () {
                let controlType = $(this).attr("data-type")
                let tournumberIndex = $(this).attr("data-index")
                if (controlType === 'tournumber') {
                    $(this).find(".tab-content .tab-pane").each(function () {
                        let pipeIndex = $(this).attr("data-index")
                        /* ///JJGR VALIDATE TO SHOW BUTTONS CHECKLIST*/
                        $("#table-5-customers-" + tournumberIndex + '-' + pipeIndex).find("tbody tr").each(function (index) {
                            if (!isNullOrEmpty($(this).find("#PipeFillingCustomerAnalysisReport" + index + '-' + tournumberIndex + '-' + pipeIndex).val())) {
                                $('#btnPipeFillingManual-' + tournumberIndex + '-' + pipeIndex).removeAttr('hidden');
                                $('#btnPipeFillingWeb-' + tournumberIndex + '-' + pipeIndex).removeAttr('hidden');
                            }
                            else {
                                $('#btnPipeFillingManual-' + tournumberIndex + '-' + pipeIndex).attr('hidden');
                                $('#btnPipeFillingWeb-' + tournumberIndex + '-' + pipeIndex).attr('hidden');
                            }

                        })
                    })
                }
            })

            var reviewedDate = new Date(Date.now())
            $('#PipeFillingCustomerReviewedBy'+index+'-'+tourNumberIndex+'-'+pipeIndex).val("@userFirstName")
            $('#PipeFillingCustomerReviewedDate'+index+'-'+tourNumberIndex+'-'+pipeIndex).val(getDateString(reviewedDate))
            $('#PipeFillingCustomerReviewedSignature' + index + '-' + tourNumberIndex + '-' + pipeIndex).html(getSignature("@userFirstName", reviewedDate))
            $("#btnPipeFillingCustomerReviewedSignature"+index+'-'+tourNumberIndex+'-'+pipeIndex).prop('hidden', true)
            ////bill
            SaveSteps(4);
            var DataForm = new FormData();
            DataForm.append('Location', '@Model.Location');
            DataForm.append('Product', '@Model.ProductName');
            DataForm.append('Tank', '@Model.Tank');
            DataForm.append('DeliveryNumber', distributionBatch);
            DataForm.append('TourNumber', $("#PipeFillingTourNumber-" + tourNumberIndex).val());
            DataForm.append('Name', tank);
            DataForm.append('Id', @Model.Id);
            var bill
            return $.ajax({
                type: "POST",
                url: "/ConditioningOrder/GetBillAsignature",
                data: DataForm,
                dataType: "json",
                async: true,
                cache: false,
                contentType: false,
                processData: false,
                success: function (response) {
                    bill = response.message;
                    if (response.result == "Ok") {
                        $("#PipeFillingCustomerAnalysisReportDiv" + index + '-' + tourNumberIndex + '-' + pipeIndex).html(`<a href="/ConditioningOrder/ExportCertificateToPDF?IdOP=@Model.ProductionOrderId&Id=@Model.Id&tourNumber=${tourNumber}&pipeNumber=${pipeNumber}&tank=${tank}&distributionBatch=${distributionBatch}"
                            class="btn btn-white m-r-5" type="button" style="background-color: transparent;><label id="PipeFillingCustomerAnalysisReportLbl${index}-${tourNumberIndex}-${pipeIndex}">${bill}</label></a>`);
                        $("#PipeFillingCustomerAnalysisReport" + index + '-' + tourNumberIndex + '-' + pipeIndex).val(bill);
                        $('#PipeFillingCustomerAnalysisReportLbl' + index + '-' + tourNumberIndex + '-' + pipeIndex).text(bill);
                        $('#PipeFillingCustomerReviewedBy' + index + '-' + tourNumberIndex + '-' + pipeIndex).val("@userFirstName");
                        $(`#btnPipeFillingSendEmail${index}-${tourNumberIndex}-${pipeIndex}`).prop("hidden", false);

                        //JJGR
                       var getChecklistId=   GetCheckListIdWebManual(tourNumberIndex, pipeIndex, @Model.Id, tourNumber, pipeNumber, distributionBatch);
                    }
                    else {
                        $.gritter.add({
                            title: "",
                            text: response.message,
                            class_name: "gritter-light"
                        })
                        $('#btnPipeFillingManual-' + tourIndex + '-' + pipeIndex).prop("disabled", false)
                        return false;
                    }
                }
            });
        }

        function signPerformanceRecord(index) {
            let isValid = true;
            $("#pipeFilling-container .tab-content .tab-pane").each(function () {
                if (!isValid)
                {
                    return
                }

                let controlType = $(this).attr("data-type")
                let tournumberIndex = $(this).attr("data-index")

                if (controlType === 'tournumber') {
                    $(this).find(".tab-content .tab-pane").each(function () {
                        if (!isValid)
                        {
                            return
                        }

                        let pipeIndex = $(this).attr("data-index")

                        $("#table-5-customers-"+tournumberIndex+'-'+pipeIndex).find("tbody tr").each(function (index) {
                            if (!isValid)
                            {
                                return
                            }
                            const valueRelease = $(`#PipeFillingReleasedCheckTrue-${tournumberIndex}-${pipeIndex}`).prop("checked");
                            let reviewedBy = $(this).find("#PipeFillingCustomerReviewedBy"+index+'-'+tournumberIndex+'-'+pipeIndex).val()
                            let reviewedDateString = $(this).find("#PipeFillingCustomerReviewedDate" + index + '-' + tournumberIndex + '-' + pipeIndex).val();
                            let state = $(this).find("#PipeFillingCustomerState" + index + '-' + tournumberIndex + '-' + pipeIndex).val();
                            if (!!valueRelease && (isNullOrEmpty(reviewedBy) || isNullOrEmpty(reviewedDateString)) && state != "False") {
                                var pipeNumber = $('#PipeFillingPipeNumber-'+tournumberIndex+'-'+pipeIndex).val()
                                $('#ModalMensajesLabel').html('Error')
                                $('#mbody').text("Control de llenado de pipas tiene firma pendiente para " + pipeNumber)
                                $('#ModalMensajes').modal('show');
                                isValid = false;
                                return;
                            }
                        });
                    })
                }
            })

            if (isValid)
            {
                $.ajax({
                 type: "POST",
                 url: "/ConditioningOrder/PerformanceSendNotify/",
                 async: true,
                 data: {
                     __RequestVerificationToken: $("[name='__RequestVerificationToken']").val(),
                     "ProductionOrderId": @Model.ProductionOrderId,
                     "PlantId": @Model.PlantId,
                     "LotProd": '@Model.LotProd'
                 },
                 dataType: "json",
                 success: function (response) {
                     if (response.result === "Ok") {
                         $.gritter.add({
                             title: "Mensaje",
                             text: response.message,
                             class_name: "gritter-light"
                         });
                     }
                 },
                 error: function (jqXHR, textStatus, errorThrown) {
                     console.error(jqXHR);
                     $.gritter.add({
                         title: "Ocurrió un error",
                         text: "Surgio un error al enviar la notificación.",
                         class_name: "gritter-light"
                     });
                 },
                 complete: function (jqXHR, textStatus) {
                     $("#imgLoadingConfirmNotificacion").hide();
                     $("#btnNotificationConfirm").prop("hidden", false);
                 }
                });
                var reviewedDate = new Date(Date.now())
                $('#PerformanceListReviewedBy'+index).val("@userFirstName")
                $('#PerformanceListReviewedDate'+index).val(getDateString(reviewedDate))
                $('#PerformanceListReviewedSignature'+index).html(getSignature("@userFirstName", reviewedDate))
                $('#btnPerformanceListReviewedSignature'+index).prop('hidden', true)
            }
        }

        function signCloseOrder() {
            let isValid = true;
            $("#table-6").find("tbody tr").each(function (index) {
                if (!isValid)
                {
                    return;
                }

                let reviewedBy = $(this).find("#PerformanceListReviewedBy"+index).val()
                let reviewedDateString = $(this).find("#PerformanceListReviewedDate"+index).val()

                if (isNullOrEmpty(reviewedBy) || isNullOrEmpty(reviewedDateString)) {
                    $('#ModalMensajesLabel').html('Error')
                    $('#mbody').text("Rendimiento del proceso de acondicionamiento tiene firma pendiente")
                    $('#ModalMensajes').modal('show');
                    isValid = false;
                    return;
                }
            })

            if (isValid)
            {
                var reviewedDate = new Date(Date.now())
                $('#ReleasedBy').val("@userFirstName")
                $('#ReleasedDate').val(getDateString(reviewedDate))
                $('#ReleasedSignature').html(getSignature("@userFirstName", reviewedDate))

                $('#btnCloseOrder').removeAttr('hidden');
                $('#btnCloseOrder').prop("disabled", false);
                $('#btnOpenOrder').prop("disabled", true);
                $("#btnOpenOrder").attr("hidden", true);
                $('#btnReleasedSignature').prop('hidden', true)
            }
        }

        function signCloseOrderValidate() {
                $('#ModalMensajesLabelRelease').html('Info')
                $('#mbodyRelease').text("¿Los datos fueron capturados correctamente?");
                $('#ModalMensajesRelease').modal('show');
                $('#BtnsuccessRelease').attr("onclick", "signCloseOrder()")
        }

        function closeOA() {
            $('#IsReleased').val('true');
            Save(true);
        }

        function OpenOA() {
            $('#IsReleased').val('false');
            Save(true);
            $("#Guardar").prop('hidden', true);
        }

        function closeOASimple() {
            $('#step1').find('button').each(function () {
                $(this).prop("disabled", true);
            });
            $('#step2').find('button').each(function () {
                $(this).prop("disabled", true);
            });
            $('#step1').find('input').each(function () {
                $(this).prop("disabled", true);
            });
            $('#step2').find('input').each(function () {
                $(this).prop("disabled", true);
            });
            enableStep3(true);
            enableStep4(true);
            $("#btnCloseOrderSimple").prop("hidden", true);
        }

        function CloseOpenOA(IsReleased) {
            $("#btnCancelarCloseOASimple").prop("disabled", true);
            $("#CloseOASimple").prop("hidden", true);
            $("#imgCloseOASimple").show();
            $.ajax({
                data: {
                    "Id": @Model.Id,
                    "ProductionOrderId": @Model.ProductionOrderId,
                    "IsReleased" : IsReleased
                },
                type: "POST",
                url: "/ConditioningOrder/SaveCloseOpen/",
                dataType: "json",
                async: true,
                success: function (response) {
                    if (response.result === "Ok") {
                        $('#StatusLbl2').text(response.status);
                        closeOASimple();
                        queryLogStatusOrder();
                    }
                    $('#ModalCloseOASimple').modal('hide');
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error(jqXHR);
                    $.gritter.add({
                        title: "Error",
                        text: "Surgio un error, por favor de intentar más tarde.",
                        class_name: "gritter-light"
                    });
                },
                complete: function (jqXHR, textStatus) {
                    $("#btnCancelarCloseOASimple").prop("disabled", false);
                    $("#CloseOASimple").prop("hidden", false);
                    $("#imgCloseOASimple").hide();
                }
            });
        }

        function Save(flag = null) {
            var step = $('#StepSaved').val();

            if (step === undefined || step === null || step === "" || step == 0) {
                step = 1
            }
            if (step == 6 && flag == null) {
                return false;
            }
            return $.ajax({
                type: "POST",
                url: "/ConditioningOrder/Save/?step=" + step,
                data: serializeConditioningOrder(),
                dataType: "json",
                async: false,
                success: function (response) {
                    console.log(response);
                    if (response.result === "Ok") {
                        //AHF
                        const step = $('#StepSaved').val();
                        switch (step)
                        {
                            case "3":
                                disabledReleaseCheckModified();
                                break;
                            case "4":
                                if (!!response.filesDto) {
                                    validationFiles(response.filesDto);
                                }
                                addWeights();
                                disabledReleaseCheckModified();
                                break;
                            case "6":
                                const isRelease = $('#IsReleased').val();
                                if (isRelease === "true") {
                                    successCloseOA();
                                } else {
                                    successOpenOA();
                                }
                                queryLogStatusOrder();
                                break;
                        }
                        $('#StatusLbl2').text(response.status);
                        validateTable4();
                    }
                    else {
                        $.gritter.add({
                            title: "Ocurrió un error",
                            text: response.message,
                            class_name: "gritter-light"
                        })
                    }
                }
            })
        }

        // ToDo Remove if will not be used anymore
        function SaveSteps(step) {
            return $.ajax({
                type: "POST",
                url: "/ConditioningOrder/Save/?step=" + step,
                data: serializeConditioningOrder(),
                dataType: "json",
                async: false,
                success: function (response) {
                    console.log(response);
                    if (response.result === "Ok") {
                        //AHF
                        if (step === 4) {
                            if (!!response.filesDto) {
                                validationFiles(response.filesDto);
                            }
                            addWeights();
                        } else if (step === 3) {
                            validateTable4();
                            disabledReleaseCheckModified();
                        }
                    }
                    else {
                        $.gritter.add({
                            title: "Ocurrió un error",
                            text: response.message,
                            class_name: "gritter-light"
                        });
                    }
                }
            })
        }

        function serializeConditioningOrder() {
            let analyticEquipmentList = [];
            $("#table-1").find("tbody tr").each(function (index) {
                analyticEquipmentList.push({
                    "Id": $(this).find("#AnalyticEquipmenId"+index).text(),
                    "Code": $(this).find("#AnalyticEquipmentCode"+index).text(),
                    "Description": $(this).find("#AnalyticEquipmentDescription"+index).text(),
                    "IsCalibrated": getCheckboxPairValue($(this).find("#AnalyticEquipmentCheckTrue"+index), $(this).find("#AnalyticEquipmentCheckFalse"+index)),
                    "Notes": $(this).find("#AnalyticEquipmentNotes"+index).val(),
                    "ReviewedBy": $(this).find("#AnalyticEquipmentReviewedBy"+index).val(),
                    "ReviewedDate": $(this).find("#AnalyticEquipmentReviewedDate"+index).val(),
                })
            });

            let scalesflowsList = [];
            $("#table-2").find("tbody tr").each(function (index) {
                scalesflowsList.push({
                    "Id": $(this).find("#ScalesflowsId"+index).text(),
                    "State": $(this).find("#ScalesflowsState"+index).val(),
                    "Description": $(this).find("#ScalesflowsDescription"+index).val(),
                    "IsCalibrated": getCheckboxPairValue($(this).find("#ScalesflowsCheckTrue"+index), $(this).find("#ScalesflowsCheckFalse"+index)),
                    "ReviewedBy": $(this).find("#ScalesflowsReviewedBy"+index).val(),
                    "ReviewedDate": $(this).find("#ScalesflowsReviewedDate"+index).val(),
                })
            });

            let pipelineClearanceHistory = [];
            $("#table-3Detail").find("tbody tr").each(function (index) {
                pipelineClearanceHistory.push({
                    "Id": $(this).find("#DeviationReportId"+index).text(),
                    "ReviewedBySecond": $(this).find("#DeviationReportReviewedBySecond"+index).val(),
                    "ReviewedDateSecond": $(this).find("#DeviationReportReviewedDateSecond"+index).val(),
                    "NotesSecond": $(this).find("#DeviationReportNotesSecond"+index).val(),
                })
            })

            let equipamentProcessesList = [];
            $("#table-4").find("tbody tr").each(function (index) {
                equipamentProcessesList.push({
                    "Id": $(this).find("#EquipamentProcessesId"+index).text(),
                    "TourNumber": $(this).find("#EquipamentProcessesTour"+index).val(),
                    "PipeNumber": $(this).find("#EquipamentProcessesNumberPipe"+index).val(),
                    "Bay": $(this).find("#EquipamentProcessesBay"+index).val(),
                    "Bomb": $(this).find("#EquipamentProcessesBomb"+index).val(),
                    "Hosefill": $(this).find("#EquipamentProcessesHosefill"+index).val(),
                    "HoseDownload": $(this).find("#EquipamentProcessesHoseDownload"+index).val(),
                    "Notes": $(this).find("#EquipamentProcessesNotes"+index).val(),
                    "ReviewedBy": $(this).find("#EquipamentProcessesReviewedBy"+index).val(),
                    "ReviewedDate": $(this).find("#EquipamentProcessesReviewedDate"+index).val(),
                })
            });

            let pipeFillingControlList = []
            $("#pipeFilling-container .tab-content .tab-pane").each(function () {
                let controlType = $(this).attr("data-type")
                let tournumberIndex = $(this).attr("data-index")

                if (controlType === 'tournumber') {
                    pipeFillingControl = {
                        "TourNumber": $("#PipeFillingTourNumber-"+tournumberIndex).val(),
                        "PipesList": []
                    }

                    $(this).find(".tab-content .tab-pane").each(function () {
                        let pipeIndex = $(this).attr("data-index")

                        let batchDetailsInitialAnalysisList = [];
                        $("#table-5-initial-analysis-details-"+tournumberIndex+'-'+pipeIndex).find("tbody tr:first td").each(function (index) {
                            batchDetailsInitialAnalysisList.push({
                                "Id": $("#PipeFillingInitialAnalysisId"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "ParameterName": $("#PipeFillingInitialAnalysisParameterName"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "MeasureUnit": $("#PipeFillingInitialAnalysisMeasureUnit"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "ValueExpected": $("#PipeFillingInitialAnalysisValueExpected"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "ValueReal": $("#PipeFillingInitialAnalysisValueReal" + index + '-' + tournumberIndex + '-' + pipeIndex).val(),
                                "Unique": $("#PipeFillingInitialAnalysisUnique" + index + '-' + tournumberIndex + '-' + pipeIndex).val(),
                                "File": !!$(`#PipeFillingInitialAnalysisAtributoValue${index}-${tournumberIndex}-${pipeIndex}`).length ? $(`#PipeFillingInitialAnalysisAtributoValue${index}-${tournumberIndex}-${pipeIndex}`).val() : null,    //AHF
                                "PathFile": !!$(`#PipeFillingInitialAnalysisFile${index}-${tournumberIndex}-${pipeIndex}`).length && !!$(`#PipeFillingInitialAnalysisFile${index}-${tournumberIndex}-${pipeIndex}`)[0].files.length ? $(`#PipeFillingInitialAnalysisFile${index}-${tournumberIndex}-${pipeIndex}`)[0].files[0].name : null,  //AHF
                                "InputId": `${index}-${tournumberIndex}-${pipeIndex}`
                            })
                        });

                        let batchDetailsFinalAnalysisList = [];
                        $("#table-5-final-analysis-details-"+tournumberIndex+'-'+pipeIndex).find("tbody tr:first td").each(function (index) {
                            batchDetailsFinalAnalysisList.push({
                                "Id": $("#PipeFillingFinalAnalysisId"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "ParameterName": $("#PipeFillingFinalAnalysisParameterName"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "MeasureUnit": $("#PipeFillingFinalAnalysisMeasureUnit"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "ValueExpected": $("#PipeFillingFinalAnalysisValueExpected"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "ValueReal": $("#PipeFillingFinalAnalysisValueReal" + index + '-' + tournumberIndex + '-' + pipeIndex).val(),
                                "Unique": $("#PipeFillingFinalAnalysisUnique" + index + '-' + tournumberIndex + '-' + pipeIndex).val(),
                                "File": !!$(`#PipeFillingFinalAnalysisAtributoValue${index}-${tournumberIndex}-${pipeIndex}`).length ? $(`#PipeFillingFinalAnalysisAtributoValue${index}-${tournumberIndex}-${pipeIndex}`).val() : null,  //AHF
                                "PathFile": !!$(`#PipeFillingFinalAnalysisFile${index}-${tournumberIndex}-${pipeIndex}`).length && !!$(`#PipeFillingFinalAnalysisFile${index}-${tournumberIndex}-${pipeIndex}`)[0].files.length ? $(`#PipeFillingFinalAnalysisFile${index}-${tournumberIndex}-${pipeIndex}`)[0].files[0].name : null,    //AHF
                                "InputId": `${index}-${tournumberIndex}-${pipeIndex}`
                            })
                        });

                        let customersList = []
                        $("#table-5-customers-"+tournumberIndex+'-'+pipeIndex).find("tbody tr").each(function (index) {
                            customersList.push({
                                "Tank": $(this).find("#PipeFillingCustomerTank"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "Name": $(this).find("#PipeFillingCustomerName"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "DeliveryNumber": $(this).find("#PipeFillingCustomerDeliveryNumber"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "ReviewedBy": $(this).find("#PipeFillingCustomerReviewedBy"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "ReviewedDate": $(this).find("#PipeFillingCustomerReviewedDate"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "AnalysisReport": $(this).find("#PipeFillingCustomerAnalysisReport"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "EmailsList": $(this).find("#PipeFillingCustomerEmailsList"+index+'-'+tournumberIndex+'-'+pipeIndex).val(),
                                "Notes": $(this).find("#PipeFillingCustomerNotes" + index + '-' + tournumberIndex + '-' + pipeIndex).val(),
                                "Id": +$(`#PipeFillingCustomerId${index}-${tournumberIndex}-${pipeIndex}`).val()
                            })
                        });

                        pipeFillingControl.PipesList.push({
                            "PipeNumber": $(this).find("#PipeFillingPipeNumber-"+tournumberIndex+'-'+pipeIndex).val(),
                            "CheckListStatus": $(this).find("#PipeFillingCheckListStatus-"+tournumberIndex+'-'+pipeIndex).val(),
                            "CheckListIncompliance": getCheckboxPairValue($(this).find("#CheckListIncomplianceCheckTrue-"+tournumberIndex+'-'+pipeIndex), $(this).find("#CheckListIncomplianceCheckFalse-"+tournumberIndex+'-'+pipeIndex)),
                            "Date": $(this).find("#PipeFillingDate-"+tournumberIndex+'-'+pipeIndex).val(),
                            "InitialWeight": $(this).find("#PipeFillingInitialWeight-"+tournumberIndex+'-'+pipeIndex).val(),
                            "FinalWeight": $(this).find("#PipeFillingFinalWeight-"+tournumberIndex+'-'+pipeIndex).val(),
                            "DiffWeight": $(this).find("#PipeFillingDiffWeight-"+tournumberIndex+'-'+pipeIndex).val(),
                            "InitialAnalysis": batchDetailsInitialAnalysisList,
                            "FinalAnalysis": batchDetailsFinalAnalysisList,
                            "AnalyzedBy": $(this).find("#PipeFillingAnalyzedBy-"+tournumberIndex+'-'+pipeIndex).val(),
                            "AnalyzedDate": $(this).find("#PipeFillingAnalyzedDate-"+tournumberIndex+'-'+pipeIndex).val(),
                            "InitialAnalyzedDate": $(this).find("#PipeFillingInitialAnalyzedDate-"+tournumberIndex+'-'+pipeIndex).val(),
                            "FinalAnalyzedDate": $(this).find("#PipeFillingFinalAnalyzedDate-"+tournumberIndex+'-'+pipeIndex).val(),
                            "DueDate": $(this).find("#PipeFillingDueDate-"+tournumberIndex+'-'+pipeIndex).val(),
                            "DistributionBatch": $(this).find("#PipeFillingDistributionBatch-"+tournumberIndex+'-'+pipeIndex).val(),
                            "InCompliance": getCheckboxPairValue($(this).find("#PipeFillingInComplianceCheckTrue-"+tournumberIndex+'-'+pipeIndex), $(this).find("#PipeFillingInComplianceCheckFalse-"+tournumberIndex+'-'+pipeIndex)),
                            "ReportPNCFolio": $(this).find("#PipeFillingReportPNCFolio-"+tournumberIndex+'-'+pipeIndex).val(),
                            "ReportPNCNotes": $(this).find("#PipeFillingReportPNCNotes-"+tournumberIndex+'-'+pipeIndex).val(),
                            "IsReleased": getCheckboxPairValue($(this).find("#PipeFillingReleasedCheckTrue-"+tournumberIndex+'-'+pipeIndex), $(this).find("#PipeFillingReleasedCheckFalse-"+tournumberIndex+'-'+pipeIndex)),
                            "ReleasedBy": $(this).find("#PipeFillingReleasedBy-"+tournumberIndex+'-'+pipeIndex).val(),
                            "ReleasedDate": $(this).find("#PipeFillingReleasedDate-"+tournumberIndex+'-'+pipeIndex).val(),
                            "Customers": customersList,
                        })
                    })

                    pipeFillingControlList.push(pipeFillingControl)
                }
            })

            let performanceList = [];
            $("#table-6").find("tbody tr").each(function (index) {
                performanceList.push({
                    "Id": +$(this).find("#PerformanceListId"+index).text(),
                    "TourNumber": $(this).find("#PerformanceListTourNumber"+index).val(),
                    "PipeNumber": $(this).find("#PerformanceListPipeNumber"+index).val(),
                    "SizeLote": $(this).find("#PerformanceListSizeLote"+index).val(),
                    "TotalTons": $(this).find("#PerformanceListTotalTons"+index).val(),
                    "DifTons": $(this).find("#PerformanceListDifTons"+index).val(),
                    "Notes": $(this).find("#PerformanceListNotes"+index).val(),
                    "ReviewedBy": $(this).find("#PerformanceListReviewedBy"+index).val(),
                    "ReviewedDate": $(this).find("#PerformanceListReviewedDate" + index).val(),
                    "ConditioningOrderId" : @Model.Id,
                })
            });

            let checkListRelationShipList = [];
            $("#table-checklist").find("tbody tr").each(function (index) {
                checkListRelationShipList.push({
                    "ConditioningOrderId": @Model.Id,
                    "Id": $(this).find("#Id-" + index).val(),
                    "TourNumber": $(this).find("#PipeFillingControlTourNumber-" + index).val(),
                    "PipeNumber": $(this).find("#PipeFillingPipeNumber-" + index).val(),
                    "Source": $(this).find("#Source-" + index).val(),
                    "Complete": $(this).find("#RelationShip-" + index).val(),
                    "Status": $(this).find("#Status-" + index).val(),
                })
            });

            return {
                "Id": @Model.Id,
                "AnalyticEquipmentList": analyticEquipmentList,
                "ScalesflowsList": scalesflowsList,
                "EquipamentProcessesList": equipamentProcessesList,
                "PipelineClearanceOA": {
                    "InCompliance": getCheckboxPairValue($("#PipelineClearanceCheckTrue"), $("#PipelineClearanceCheckFalse")),
                    "ReviewedBy": $('#PipelineClearanceReviewedBy').val(),
                    "ReviewedDate": $('#PipelineClearanceReviewedDate').val(),
                },
                "PipelineClearanceHistory": pipelineClearanceHistory,
                "PerformanceList": performanceList,
                "PipeFillingControl": pipeFillingControlList,
                "ReleasedBy": $("#ReleasedBy").val(),
                "ReleasedDate": $("#ReleasedDate").val(),
                "ReleasedNotes": $("#ReleasedNotes").val(),
                "IsReleased": $('#IsReleased').val(),
                "Location": '@Model.Location',
                "ProductName": '@Model.ProductName',
                "Tank": '@Model.Tank',
                "PlantId": '@Model.PlantId',
                "ProductId": '@Model.ProductId',
                "CheckListRelationShip": checkListRelationShipList,
                "LotProd": '@Model.LotProd',
                "ProductionOrderId": '@Model.ProductionOrderId'
            }
        }

        var validateStep = function (step, disable = true) {
            if (loadingWizard) {
                return true
            }

            // if step was already saved should skip
            var currentStep = $('#StepSaved').val();
            // Order is already closed
            if(@Model.StepSaved == 6 || +currentStep > 6)
            {
                return true
            }

            // Order is open, steps 3 and 4 could be always updated
            if ((@Model.StepSaved > step || +currentStep > step) && (step != 3 && step != 4 && step != 5)) {
                return true;
            }
            // validate form for current step
            switch (step)
            {
                case 1:
                    if(!1 === validateStep1()) {
                        $('#ModalMensajesLabel').html('Error')
                        $('#mbody').text("Todos los equipos deberan estar calibrados para continuar");
                        $('#ModalMensajes').modal('show');
                        return false
                    }
                    break
                case 2:
                    if(!1 === validateStep2()) {
                        $('#ModalMensajesLabel').html('Error')
                        $('#mbody').text("Se necesita que las básculas y flujómetros se encuentren calibrados y el despeje de línea cumpla para continuar");
                        $('#ModalMensajes').modal('show');
                        return false
                    }
                    break
                case 3:
                    if (!1 === validateStep3() && +currentStep <= 4) {
                        $('#ModalMensajesLabel').html('Error')
                        $('#mbody').text("Se necesita agregar y firmar todos los tournumbers para continuar");
                        $('#ModalMensajes').modal('show');
                        return false
                    }
                    break
                case 4:
                    if(!validateStep4()) {
                        $('#ModalMensajesLabel').html('Error')
                        $('#mbody').text("Se necesita subir un checklist con cumplimiento, dictarminar los analisis y la firma de certificado para continuar");
                        $('#ModalMensajes').modal('show');
                        return false
                    }
                    break
                case 5:
                    if(!1 === validateStep5()) {
                        $('#ModalMensajesLabel').html('Error')
                        $('#mbody').text("Se necesita firmar el rendimiento del proceso de acondicionamiento para continuar");
                        $('#ModalMensajes').modal('show');
                        return false
                    }
                    break
                case 6:
                    if(!1 === validateStep6()) {
                        $('#ModalMensajesLabel').html('Error')
                        $('#mbody').text("Se necesita la firma del responsable sanitario para cerrar la orden");
                        $('#ModalMensajes').modal('show');
                        return false
                    }
                    break
                default:
                    $('#ModalMensajesLabel').html('Error')
                    $('#mbody').text("Acción inválida");
                    $('#ModalMensajes').modal('show');
                    return false
            }

            var res = SaveSteps(step)

            if (res.responseJSON.result !== "Ok" || res.responseJSON.nextStep < step) {
                ret =  false
            }

            // current step will be set to readonly mode
            if (disable === true)
            {
                $('#step' + step).find('input').each(function () {
                    $(this).prop("disabled", true);
                });
            }
            if (step >= 2) {
                $("#SelectedScalesFlowMeters").prop("disabled", true);
                $("#BtnScalesFlowMeters").prop("disabled", true);
            }
            if (step >= 6) {
                $('#step3').find('input').each(function () {
                    $(this).prop("disabled", true);
                });

                $('#step4').find('input').each(function () {
                    $(this).prop("disabled", true);
                });

                $('#step5').find('input').each(function () {
                    $(this).prop("disabled", true);
                });

                $("#btnCloseOrder").prop("disabled", true);
            }

            // bump current step
            $('#StepSaved').val(step + 1);
            if ($("#StepSaved").val() == 6) {
                $("#Guardar").prop('hidden', true);
            }
            return true;
        }

        var validateStep1 = function () {
            let isValid = true;
            $("#table-1").find("tbody tr").each(function (index) {
                if (!1 === $(this).find("#AnalyticEquipmentCheckTrue"+index).prop("checked")) {
                    isValid = false;
                    return false;
                }
            });

            return isValid;
        }

        var validateStep2 = function () {
            let isValid = true;

            if (!1 === $("#PipelineClearanceCheckTrue").prop("checked")) {
                $("#PipelineClearanceCheckTrue").addClass("border-danger")
                isValid = false;
            }

            var tableCount = $("#table-2").find("tbody tr").length;
            if (isNullOrEmpty(tableCount) || tableCount < 1) {
                isValid = false;
            }
            $("#table-2").find("tbody tr").each(function (index) {
                if (!1 === $(this).find("#ScalesflowsCheckTrue" + index).prop("checked")) {
                    isValid = false;
                    return false;
                }

            });
            var Ondisabled = new Array();
            $("#table-2").find("tbody tr").each(function (index) {
                if ($("#ScalesflowsCheckTrue" + index).is(':checked')) {
                    Ondisabled.push(true);
                }
                else {
                    Ondisabled.push(false);
                }
            });
            if (Ondisabled.includes(false)) {
                $("#PipelineClearanceCheckTrue").prop("disabled", true);
                $("#PipelineClearanceCheckFalse").prop("disabled", true);
            }
            else if ((Ondisabled.includes(true)) && (!$("#PipelineClearanceCheckTrue").prop("checked") || !$("#PipelineClearanceCheckTrue").prop("checked"))) {
                 $('#PipelineClearanceCheckTrue').removeAttr('disabled');
                 $('#PipelineClearanceCheckFalse').removeAttr('disabled');
            }
            return isValid;
        }

        var validateStep3 = function () {
            let isValid = true;

            var tourNumberCount = $("#table-4").find("tbody tr").length;
            if (isNullOrEmpty(tourNumberCount) || tourNumberCount < 1 && $("#StatusLbl2").text() === "OA-En proceso") {
                isValid = false;
            }

            $("#table-4").find("tbody tr").each(function (index) {
                if (isNullOrEmpty($('#EquipamentProcessesReviewedBy' + index).val())
                    || isNullOrEmpty($('#EquipamentProcessesReviewedDate' + index).val())) {
                    isValid = false;
                    return false;
                }

            });


            return isValid;
        }
        //AHF
        var validateStep4 = function () {
            let isValid = true;
            const filesInitial = $('[id^=PipeFillingInitialAnalysisFileText]');
            if (!!filesInitial && !!filesInitial.length) {
                var fields = filesInitial.toArray().find(x => !!!x.value);
                isValid = !!!fields;
            }
            if (!isValid)
                return isValid;
            const filesFinal = $('[id^=PipeFillingFinalAnalysisFileText]');
            if (!!filesFinal && !!filesFinal.length) {
                var fields = filesFinal.toArray().find(x => !!!x.value);
                isValid = !!!fields;
            }
            ///JJGR CHECKLIST
            $("#pipeFilling-container .tab-content .tab-pane").each(function () {
                let controlType = $(this).attr("data-type")
                let tournumberIndex = $(this).attr("data-index")
                if (controlType === 'tournumber') {
                    $(this).find(".tab-content .tab-pane").each(function () {
                        let pipeIndex = $(this).attr("data-index");
                        const released = $(`#PipeFillingReleasedCheckTrue-${tournumberIndex}-${pipeIndex}`).prop("checked");
                        const unreleased = $(`#PipeFillingReleasedCheckFalse-${tournumberIndex}-${pipeIndex}`).prop("checked");
                        if ((!!released && isNullOrEmpty($(this).find("#PipeFillingCheckListStatus-" + tournumberIndex + '-' + pipeIndex).val())) ||
                            (!!released && $(this).find(`#PipeFillingCheckListStatus-${tournumberIndex}-${pipeIndex}`).val() !== "CL-Cerrado cumple") || (!released && !unreleased)) {
                            isValid = false;
                        }
                        //validate productoConforme
                        if (($("#PipeFillingInComplianceCheckFalse-" + tournumberIndex + '-' + pipeIndex).prop("checked"))) {
                            if (isNullOrEmpty($("#PipeFillingReportPNCFolio-" + tournumberIndex + '-' + pipeIndex).val())) {
                                $("#PipeFillingReportPNCFolio-" + tournumberIndex + '-' + pipeIndex).addClass("border-danger")
                                isValid = false;
                            }
                            if (isNullOrEmpty($("#PipeFillingReportPNCNotes-" + tournumberIndex + '-' + pipeIndex).val())) {
                                $("#PipeFillingReportPNCNotes-" + tournumberIndex + '-' + pipeIndex).addClass("border-danger")
                                isValid = false;
                            }
                        }

                    });
                }
            });

            return isValid;
        }

        var validateStep5 = function () {
            let isValid = true;

            $("#table-6").find("tbody tr").each(function (index) {
                if (isNullOrEmpty($(this).find("#PerformanceListReviewedBy"+index).val())
                    || isNullOrEmpty($(this).find("#PerformanceListReviewedDate"+index).val())) {
                    isValid = false;
                    return false;
                }
            });

            return isValid;
        }

        var validateStep6 = function () {
            let isValid = true;

            if(isNullOrEmpty($("#ReleasedBy").val()) || isNullOrEmpty($("#ReleasedDate").val())) {
                isValid = false;
            }

            return isValid;
        }
        var BlockPipelineClearance = function () {
            $("#PipelineClearanceCheckTrue").prop("disabled", true);
            $("#PipelineClearanceCheckFalse").prop("disabled", true);
        }
        async function SaveChecklistManual(step) {
           var info = false;
            if (step > 3) {
                info = await ValidateDictium(@Model.Id, $('#TourNumberModal').val(), 0, $('#DistributionBatchModal').val());
            }
            if (info != true) {
                var fileUpload = $("#fileUpload").get(0);
                var files = fileUpload.files;
                var fileData = new FormData();
                for (var i = 0; i < files.length; i++) {
                    fileData.append(files[i].name, files[i]);
                }

                fileData.append('conditioningOrderId', @Model.Id);
                fileData.append('TourNumber', $('#TourNumberModal').val());
                fileData.append('CheckListIncompliance', $('#CheckListModal').val());
                fileData.append('DistributionBatch', $('#DistributionBatchModal').val());
                return $.ajax({
                    type: "POST",
                    url: "/ConditioningOrder/SaveChecklistManual?step=" + $('#StepFile').val(),
                    data: fileData,
                    dataType: "json",
                    async: false,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        console.log(response);
                        if (response.result === "Ok") {
                            $.gritter.add({
                                title: "Mensaje",
                                text: response.message,
                                class_name: "gritter-light gritter-center"
                            });
                            const index = $("#IndexCheckListModal").val();
                            $(`#CheckListIncomplianceCheckTrue-${index}`).attr("disabled", true);
                            $(`#CheckListIncomplianceCheckFalse-${index}`).attr("disabled", true);
                            $("#flagSavedFileCheckList").val("true");

                            $("#checkListManualCtrls-0").attr("hidden", true);
                            $('#CheckListModal').val();
                            $('#CheckListIncomplianceCheckFalse-step1').prop('checked', false);
                            $('#CheckListIncomplianceCheckTrue-step1').prop('checked', false);
                        }
                        else {
                            $.gritter.add({
                                title: "Ocurrió un error",
                                text: response.message,
                                class_name: "gritter-light"
                            })
                        }
                    }
                })
            }
            else {
                $.gritter.add({
                    title: "",
                    text: "Ya se dictaminó correctamente un checklist",
                    class_name: "gritter-light"
                })
            }
        }

        function addScalesFlowMeters() {
            $.ajax({
                type: "GET",
                url: "/ConditioningOrder/AddScalesFlowMeters?ConditioningId=@Model.Id&SelectedScalesFlowMeters=" + $('#SelectedScalesFlowMeters').val(),
                success: function (response) {
                    if (response.result === "fail") {
                        $.gritter.add({
                            title: "",
                            text: response.message,
                            class_name: "gritter-light"
                        })
                    }
                    else {
                        $("#table2").html(response);
                        $("#SelectedScalesFlowMeters").val("");
                        bindEvents();
                    }
                },
            })
        }

        function GetLastStatus(idOA, tourNumber, pipe, distributionBatch, tourIndex, pipeIndex, checklistId) {
            var LastStatus
            $.ajax({
                type: "GET",
                url: "/ConditioningOrder/GetLastStatus/?tourNumber=" + tourNumber + "&idOA=" + idOA + "&distributionBatch=" + distributionBatch + "&checklistId=" + checklistId,
                dataType: "json",
                success: function (response) {
                    LastStatus = response.message;
                    if (response.result == "Ok") {
                        $('#PipeFillingCheckListStatus-' + tourIndex + '-' + pipeIndex).val(LastStatus);
                        $('#PipeFillingCheckListStatusLbl-' + tourIndex + '-' + pipeIndex).text(LastStatus);
                    }
                    else {
                        $.gritter.add({
                            title: "",
                            text: response.message,
                            class_name: "gritter-light"
                        })
                        $('#btnPipeFillingManual-' + tourIndex + '-' + pipeIndex).prop("disabled", false)
                        return false;
                    }
                }
            });
        }

        async function ValidateDictium(idOA, tourNumber, pipe, distributionBatch) {
             var valorAccion
             await   $.ajax({
                   type: "GET",
                   url: "/ConditioningOrder/GetLastStatusDictium/?tourNumber=" + tourNumber + "&idOA=" + idOA + "&distributionBatch=" + distributionBatch,
                    dataType: "json",
                    async: false,
                    success: function (response) {
                        //valorAccion = response.message;
                        if (response.result == "Ok") {
                            valorAccion = true;
                        }
                        else {
                            valorAccion =  false;
                        }
                    }
                });
            return valorAccion;
        }

        function ShowModalFile(idOA, tourNumber, pipe, distributionBatch, checkListId, tourIndex, pipeIndex, checked, option) {
            //option 1 old
            if (option == 1) {
                $('#ConditioningOrderModal').val(idOA);
                $('#TourNumberModal').val(tourNumber);
                $('#IndexCheckListModal').val(`${tourIndex}-${pipeIndex}`);
                $('#DistributionBatchModal').val(distributionBatch);
                $('#CheckListModal').val(checked);
                $('#DivUpload').prop('hidden', false);
                $('#modal-popup').modal('show');
                $('#StepFile').val(4);

            }
            else {
                $('#ConditioningOrderModal').val(idOA);
                $('#TourNumberModal').val("");
                $('#IndexCheckListModal').val("");
                $('#DistributionBatchModal').val("");
                $('#CheckListModal').val(true);
                $('#DivUpload').prop('hidden', false);
                $('#StepFile').val(3);
                $('#checkListManualCtrls-0').removeAttr('hidden');
                $('#CheckListIncomplianceCheckTrue-step1').removeAttr('disabled');
                $('#CheckListIncomplianceCheckFalse-step1').removeAttr('disabled');
            }
        }

        async function pipeFillingWeb(idOA, tourNumber, pipe, distributionBatch, checkListId, tourIndex, pipeIndex) {
            $('#btnPipeFillingManual-'+tourIndex+'-'+pipeIndex).prop("disabled", true)
            $('#CheckListIncomplianceCheckTrue-'+tourIndex+'-'+pipeIndex).prop("disabled", true)
            $('#CheckListIncomplianceCheckFalse-'+tourIndex+'-'+pipeIndex).prop("disabled", true)
            var valorAccion
            var info = await ValidateDictium(idOA, tourNumber, pipe, distributionBatch);
            if (info != true) {
                $.ajax({
                    type: "GET",
                    url: "/ConditioningOrder/CreateNewCheckList/?tourNumber=" + tourNumber + "&idOA=" + idOA + "&distributionBatch=" + distributionBatch + "&checkListId=" + checkListId + "&pipeNumber=" + pipe,
                    dataType: "json",
                    success: function (response) {
                        valorAccion = response.message;
                        if (response.result == "Ok") {

                            if (valorAccion > 0) {
                                $.gritter.add({
                                    title: "Mensaje",
                                    text: "Checklist consultado con éxito",
                                    class_name: "gritter-light"
                                })
                                window.open(window.location.origin + '/CheckListQuestions/QuestionsTwo?idOA=' + idOA + '&tournumber=' + tourNumber + '&distributionBatch=' + distributionBatch + '&checkListId=' + valorAccion, '_blank');
                            }
                            else {
                                $.gritter.add({
                                    title: "Mensaje",
                                    text: "Genera un checklist nuevo",
                                    class_name: "gritter-light"
                                })
                            }
                        }
                        else {
                            $.gritter.add({
                                title: "Ocurrió un error",
                                text: response.message,
                                class_name: "gritter-light"
                            })
                            $('#btnPipeFillingManual-' + tourIndex + '-' + pipeIndex).prop("disabled", false)
                            return false;
                        }
                    }
                });
            }
            else {
                $.gritter.add({
                    title: "",
                    text: "Ya se dictaminó correctamente un checklist",
                    class_name: "gritter-light"
                })
            }
        }

        async function pipeFillingManual(idOA, tourNumber, pipe, distributionBatch, tourIndex, pipeIndex) {
            var info = await ValidateDictium(idOA, tourNumber, pipe, distributionBatch);
            if (info != true) {
                $('#btnPipeFillingWeb-' + tourIndex + '-' + pipeIndex).prop("disabled", true)
                $('#btnPipeFillingRead-' + tourIndex + '-' + pipeIndex).prop("disabled", true)
                $('#CheckListIncomplianceCheckTrue-' + tourIndex + '-' + pipeIndex).prop("disabled", false)
                $('#CheckListIncomplianceCheckFalse-' + tourIndex + '-' + pipeIndex).prop("disabled", false)
                $('#CheckListIncomplianceCheckTrue-' + tourIndex + '-' + pipeIndex).prop('checked', false);
                $('#CheckListIncomplianceCheckFalse-' + tourIndex + '-' + pipeIndex).prop('checked', false);
                $('#checkListManualCtrls-' + tourIndex + '-' + pipeIndex).removeAttr('hidden');
                $('#CheckListIncomplianceCheckTrue-' + tourIndex + '-' + pipeIndex).removeAttr('hidden');
                $('#CheckListIncomplianceCheckFalse-' + tourIndex + '-' + pipeIndex).removeAttr('hidden');
            }
            else {
                $.gritter.add({
                    title: "",
                    text: "Ya se dictaminó correctamente un checklist",
                    class_name: "gritter-light"
                })
            }
        }
        ///jjgr
        function saveChecklistManualStepOne() {
            let inCompliance = null
             if ($('#CheckListIncomplianceCheckTrue-step1').is(':checked')) {
                 $('#CheckListModal').val(true);
                 //$('#CheckListIncomplianceCheckFalse-step1').prop('checked', false);
            }
              else if ($('#CheckListIncomplianceCheckFalse-step1').is(':checked')) {
                 //$('#CheckListIncomplianceCheckTrue-step1').prop('checked', false);
                $('#CheckListModal').val(false);
             }
             $('#modal-popup').modal('show');
        }

        function CloseModalFile() {
            $("#checkListManualCtrls-0").attr("hidden", true);
            $('#CheckListModal').val();
            $('#CheckListIncomplianceCheckFalse-step1').prop('checked', false);
            $('#CheckListIncomplianceCheckTrue-step1').prop('checked', false);
            $('#modal-popup').modal('hide');
        }

        function saveChecklistManual(id, tourNumber ,pipe, checkListId, status, distributionBatch, tourIndex, pipeIndex, checked) {
            let inCompliance = null
            if ($('#CheckListIncomplianceCheckTrue-'+tourIndex+'-'+pipeIndex).is(':checked')) {
                inCompliance = true
            }
            else if ($('#CheckListIncomplianceCheckFalse-'+tourIndex+'-'+pipeIndex).is(':checked')) {
                inCompliance = false
            }

            ShowModalFile(@Model.Id, tourNumber, pipe, distributionBatch, 0 ,tourIndex, pipeIndex, checked, 1)
        }

        function pipeFillingShowHistory(idOA, tourNumber, pipe, distributionBatch, tourIndex, pipeIndex) {
            const hidden = $('#table-HistoryChecklist-' + tourIndex + '-' + pipeIndex).prop('hidden');
            $('#table-HistoryChecklist-' + tourIndex + '-' + pipeIndex).prop('hidden', !hidden);
            if (hidden) {
                var tableDLhistorial = $('#table-HistoryChecklist-' + tourIndex + '-' + pipeIndex).DataTable({
                    "ajax": {
                        "url": "/ConditioningOrder/GetHistoryChecklist?tourNumber=" + tourNumber + "&idOA=" + idOA + "&distributionBatch=" + distributionBatch,
                        "type": "GET",
                        "datatype": "json"
                    },
                    "columns": [
                        { "data": "createdBy" },
                        { "data": "date", "render": function ( data, type, row ) {
                            return getDate(new Date(data)) + ' ' + getDateTime(new Date(data))
                        } },
                        {
                            "data": {
                                id: "id", numOA: "numOA", tourNumber: "tourNumber",
                                distributionBatch: "distributionBatch", file: "file", source: "source", checkListId: "checkListId"
                            },
                            "render": function (data, type, full) {
                                 if (data.source === false) {
                                    if (data.file === null) {
                                        return `<i class='fas fa-exclamation-circle'></i>Sin archivo`;
                                    }
                                    else {
                                        return `<a href='http://@url/@resource.GetString("PathCheckListFrontEnd")/${data.file}' target="popup"><i class='fas fa-file-download'></i>Descargar</a>`;
                                    }
                                }
                                 else {
                                     console.log(data)
                                   return `<a href='http://@url/CheckListQuestions/QuestionsTwo?idOA=${data.numOA}&tournumber=${data.tourNumber}&distributionBatch=${data.distributionBatch}&checkListId=${data.id}' target="popup"> <i class='fas fa-file'></i>Consultar ${data.pipeNumber}</a>`;
                                }
                            }, "width": "30%"
                        },
                        { "data": "statusTwo" },
                    ],
                    columnDefs: [{
                        targets: 1,
                        render: $.fn.dataTable.render.moment('DD/MM/YYYY')
                    }],
                    destroy: true,
                    pageLength: 20,
                    orderCellsTop: true,
                    fixedHeader: true,
                    bLengthChange: false,
                    bFilter: true,
                    bAutoWidth: false,
                    bPaginate: false,
                    searching: false,
                    dom: 'Bfrtip',
                    "bInfo": false,
                    buttons: [
                        {
                            extend: 'pdf',
                            className: 'hide',
                            charset: 'utf-8',
                            bom: true
                        }
                    ],
                    "language": {
                        "search": '<i class="fa fa-filter" aria-hidden="true"></i>Buscar',
                        "searchPlaceholder": '@searchPlaceholder',
                        "emptyTable": "@emptyTable",
                        "lengthMenu": "@lengthMenu",
                        "info": "@info",
                        "loadingRecords": "@loadingRecords",
                        "processing": "@processing",
                        "zeroRecords": "@zeroRecords",
                        "infoEmpty": "@infoEmpty",
                        "infoFiltered": "@infoFiltered",
                    },
                    "order": [],
                    "columnDefs": [{
                        "targets": 'no-sort',
                        "orderable": false,
                    }]

                });
            }
        }

        function pipeFillingRead(idOA, tourNumber, pipe, distributionBatch, checkListId) {
            $.ajax({
                type: "GET",
                url: "/ConditioningOrder/GetCheckListPendding/?tourNumber=" + tourNumber + "&idOA=" + idOA + "&distributionBatch=" + distributionBatch,
                dataType: "json",
                success: function (response) {
                    valorAccion = response.message;
                    if (response.result == "Ok") {
                        $.gritter.add({
                            title: "Mensaje",
                            text: "Checklist consultado con éxito",
                            class_name: "gritter-light"
                        })
                        window.open(window.location.origin + '/CheckListQuestions/QuestionsTwo?idOA=' + idOA + '&tournumber=' + tourNumber + '&distributionBatch=' + distributionBatch + '&checkListId=' + valorAccion, '_blank');
                    }
                    else {
                        $.gritter.add({
                            title: "Ocurrió un error",
                            text: response.message,
                            class_name: "gritter-light"
                        })

                        return false;
                    }
                }
            });
        }

        function selectBayAreaFilter(value, index) {
            let list = [];
            @foreach (var d in Model.BayAreaList)
            {
                @:list.push({ Index: @d.Index, BayArea: "@d.BayArea", FillingPump: "@d.FillingPump", FillingHose: "@d.FillingHose" });
            }

            var item = list[value]
            $("#EquipamentProcessesBomb"+index).val(item.FillingPump)
            $("#EquipamentProcessesHosefill"+index).val(item.FillingHose)
        }
        //if you need to call this function, be careful beacause inside removes the signature from table 6.
        function reloadTable4(refresh = "false", isDelete = false, message = null) {
            let tournumbers = $("#tournumber").val()
            $('#ModalSpinner').modal('show');

            return $.ajax({
                type: "GET",
                url: "/ConditioningOrder/GetEquipment?tournumberList=" + tournumbers + "&id=" + @Model.Id + "&datePipelineClearance=" + $('#PipelineClearanceReviewedDate').val() + "&refresh=" + refresh,
                success: function (response) {
                    if (response.result === "NotFound") {
                        let tournumber = $('#TxtTnumber').val()
                        let tournumbersList = ($("#tournumber").val() === '') ? [] : $("#tournumber").val().split(',');

                        while (tournumbersList.indexOf(tournumber) !== -1)
                        {
                            tournumbersList.splice(tournumbersList.indexOf(tournumber), 1);
                        }
                        $("#tournumber").val(tournumbersList.join(','))

                        $('#ModalTNumberError').html('No se encontro el tournumber seleccionado.')
                        $('#ModalTNumberError').removeAttr('hidden')
                        $('#TxtTnumber').addClass("border-danger")
                        $('#ModalSpinner').modal('hide');
                    }
                    else
                    {
                        // Check for info/warning messages
                        $("#table4").html(response)
                        $('.selectpicker').selectpicker()
                        removeSignTable6();
                        clearModalTNumber()

                        loadSavedDataTable4()
                        reloadTable5()

                        $('#ModalSpinner').modal('hide')
                        $('#ModalTNumber').modal('hide')

                        let equipamentProcessesError = $("#EquipamentProcessesError").val().trim().replace(' ',',')
                        if (!isNullOrEmpty(equipamentProcessesError) && !!!isDelete) {
                            $('#ModalMensajesLabel').html('Error')
                            $('#mbody').text("Las siguientes pipas no se agregaron: " + equipamentProcessesError);
                            $('#ModalMensajes').modal('show');
                        } else if (!!isDelete) {
                            $.gritter.add({
                                title:"Tournumber",
                                text: message,
                                class_name: "gritter-light"
                            });
                        }
                        validateTable4();
                    }
                },
                failure: function () {
                    $('#ModalMensajesLabel').html('Error')
                    $('#mbody').text("Ocurrió un error al agregar el tournumber.");
                    $('#ModalMensajes').modal('show');
                    $('#ModalTNumberError').html('Ocurrió un error al agregar el tournumber.')
                    $('#ModalTNumberError').removeAttr('hidden')
                    $('#TxtTnumber').addClass("border-danger")
                    $('#ModalSpinner').modal('hide');
                }
            })
        }
        function confirm(tnumber) {
            $('#btnconfirm').html('');
            $('#btnconfirm').append(" <div class='modal-content'> <div class='modal-header'><h5 style='color:#005591' class='modal-title' id='exampleModalLabel'>ALERTA</h5><button type='button' class='close' data-dismiss='modal' aria-label='Close'><span aria-hidden='true'>&times;</span></button></div> <div class='modal-body'>¿Estas seguro que quieres eliminar " + tnumber + "?</div><div class='modal-footer'><button style='color:white; background-color:#005591;' onclick='RemoveTnumber(\"" + tnumber + "\")'  type='button' class='btn btn-primary'> Confirmar</button><button id='btnclose' style='color:white' type='button' class='btn btn-secondary' data-dismiss='modal'>Cerrar</button></div> </div>");
        }
        function loadSavedDataTable4() {
            let tournumbers = []
            $("#table-4").find("tbody tr").each(function (index) {
                let tournumber = $(this).find("#EquipamentProcessesTour"+index).val()
                if (tournumbers.indexOf(tournumber) === -1) {
                    tournumbers.push(tournumber)
                }
            })

            $("#tournumber").val(tournumbers.join(','))
            $('#tnumberLbl').html('')
            tournumbers.forEach((number) => {
                $('#tnumberLbl').append("<label style='color:#005591' onclick='confirm(\""+number+"\")'  class='fa fa-window-close' data-toggle='modal' data-target='#numberModal'>" + number + "</label>")
            })
            //onclick='RemoveTnumber(\""+number+"\")'
            $("#table-4").find("tbody tr").each(function (index) {
                let reviewedBy = $(this).find("#EquipamentProcessesReviewedBy"+index).val()
                let reviewedDateString = $(this).find("#EquipamentProcessesReviewedDate"+index).val()
                let reviewedDate = !isNullOrEmpty(reviewedDateString) ? new Date(reviewedDateString) : null
                let reviewedSignature = getSignature(reviewedBy, reviewedDate)
                $('#EquipamentProcessesReviewedSignature'+index).html(reviewedSignature)

                if (!isNullOrEmpty(reviewedBy) || !isNullOrEmpty(reviewedDateString)) {
                    $('#btnEquipamentProcessesReviewedSignature'+index).prop('hidden', true)
                }
                if(!isNullOrEmpty(reviewedBy) && !isNullOrEmpty(reviewedDateString)) {
                    $(this).find('#EquipamentProcessesBay'+index).prop("disabled", true)
                    $('.selectpicker').selectpicker('refresh');
                    $(this).find('#EquipamentProcessesHoseDownload' + index).prop("disabled", true)
                    $(this).find('#EquipamentProcessesNotes' + index).prop("disabled", true)
                }
            });
        }

        function reloadTable5() {
            $('#ModalSpinner').modal('show');
            return $.ajax({
                type: "GET",
                url: "/ConditioningOrder/GetPipeFillingControls?id=" + @Model.Id,
                success: function (partialViewResult) {
                    $("#table5").html(partialViewResult)
                    $('.selectpicker').selectpicker()

                    bindEventsTable5()
                    loadSavedDataTable5()
                    addWeights();
                    validateTable4();
                    disabledReleaseCheckModified();
                },
                failure: function () {
                    console.log("Failed getting pipes filling controls")
                    $.gritter.add({
                        title: "Ocurrió un error",
                        text: response.message,
                        class_name: "gritter-light"
                    })
                },
                complete: function (jqXHR, textStatus) {
                    $('#ModalSpinner').modal('hide');
                }
            })
        }

        function bindEventsTable5() {

                $("#pipeFilling-container .tab-content .tab-pane").each(function () {
                let controlType = $(this).attr("data-type")
                let tournumberIndex = $(this).attr("data-index")

                if (controlType === 'tournumber') {
                    $(this).find(".tab-content .tab-pane").each(function () {
                        let pipeIndex = $(this).attr("data-index")

                        $("#CheckListIncomplianceCheckTrue-"+tournumberIndex+'-'+pipeIndex).change(function () {
                            if ($(this).is(':checked')) {
                                $('#CheckListIncomplianceCheckFalse-' + tournumberIndex + '-' + pipeIndex).prop('checked', false);
                            }
                        });
                        $("#CheckListIncomplianceCheckFalse-"+tournumberIndex+'-'+pipeIndex).change(function () {
                            if ($(this).is(':checked')) {
                                $('#CheckListIncomplianceCheckTrue-' + tournumberIndex + '-' + pipeIndex).prop('checked', false);
                            }
                        });

                        $("#PipeFillingInComplianceCheckTrue-"+tournumberIndex+'-'+pipeIndex).change(function () {
                            if ($(this).is(':checked')) {
                                $('#PipeFillingInComplianceCheckFalse-'+tournumberIndex+'-'+pipeIndex).prop('checked', false);

                                $('#PipeFillingReportPNCFolio-'+tournumberIndex+'-'+pipeIndex).val('NA')
                                $('#PipeFillingReportPNCNotes-'+tournumberIndex+'-'+pipeIndex).val('NA')
                                $('#PipeFillingReportPNCFolio-'+tournumberIndex+'-'+pipeIndex).prop("disabled", true)
                                $('#PipeFillingReportPNCNotes-'+tournumberIndex+'-'+pipeIndex).prop("disabled", true)
                            }
                            else {
                                $('#PipeFillingReportPNCFolio-'+tournumberIndex+'-'+pipeIndex).val('')
                                $('#PipeFillingReportPNCNotes-'+tournumberIndex+'-'+pipeIndex).val('')
                                $('#PipeFillingReportPNCFolio-'+tournumberIndex+'-'+pipeIndex).prop("disabled", true)
                                $('#PipeFillingReportPNCNotes-'+tournumberIndex+'-'+pipeIndex).prop("disabled", true)
                            }
                        });
                        $("#PipeFillingInComplianceCheckFalse-"+tournumberIndex+'-'+pipeIndex).change(function () {
                            if ($(this).is(':checked')) {
                                $('#PipeFillingInComplianceCheckTrue-'+tournumberIndex+'-'+pipeIndex).prop('checked', false);

                                $('#PipeFillingReportPNCFolio-'+tournumberIndex+'-'+pipeIndex).val('')
                                $('#PipeFillingReportPNCNotes-'+tournumberIndex+'-'+pipeIndex).val('')
                                $('#PipeFillingReportPNCFolio-'+tournumberIndex+'-'+pipeIndex).prop("disabled", false)
                                $('#PipeFillingReportPNCNotes-'+tournumberIndex+'-'+pipeIndex).prop("disabled", false)
                            }
                            else {
                                $('#PipeFillingReportPNCFolio-'+tournumberIndex+'-'+pipeIndex).val('')
                                $('#PipeFillingReportPNCNotes-'+tournumberIndex+'-'+pipeIndex).val('')
                                $('#PipeFillingReportPNCFolio-'+tournumberIndex+'-'+pipeIndex).prop("disabled", true)
                                $('#PipeFillingReportPNCNotes-'+tournumberIndex+'-'+pipeIndex).prop("disabled", true)
                            }
                        });
                        $("#PipeFillingReleasedCheckTrue-"+tournumberIndex+'-'+pipeIndex).change(function (event) {
                            if ($(this).is(':checked')) {
                                $('#ModalMensajesLabelRelease').html('Info')
                                $('#mbodyRelease').text("¿Los datos fueron capturados correctamente?");
                                $('#ModalMensajesRelease').modal('show');
                                $('#BtnsuccessRelease').attr("onclick", "ReleaseTable4(1," + pipeIndex + "," + tournumberIndex + ")");
                                $('#BtndangerRelease').attr("onclick", "ReleaseTable4(0," + pipeIndex + "," + tournumberIndex + ")");
                            }
                            else {
                                $('#PipeFillingReleasedBy-'+tournumberIndex+'-'+pipeIndex).val('')
                                $('#PipeFillingReleasedDate-'+tournumberIndex+'-'+pipeIndex).val('')
                                $('#PipeFillingReleasedSignature-'+tournumberIndex+'-'+pipeIndex).html("")

                                $('#table-5-customers-'+tournumberIndex+'-'+pipeIndex).find(".sign-customer-record").each(function() {
                                    $(this).prop("disabled", true);
                                })
                            }
                        });
                        $("#PipeFillingReleasedCheckFalse-"+tournumberIndex+'-'+pipeIndex).change(function () {
                            if ($(this).is(':checked')) {
                                $("#pipeIndex").val(pipeIndex);
                                $("#tourIndex").val(tournumberIndex);
                                $("#ModalReleaseFalse").modal({
                                    backdrop: 'static',
                                    keyboard: false
                                }, "show");
                            } else {
                                $('#PipeFillingReleasedBy-'+tournumberIndex+'-'+pipeIndex).val('')
                                $('#PipeFillingReleasedDate-'+tournumberIndex+'-'+pipeIndex).val('')
                                $('#PipeFillingReleasedSignature-'+tournumberIndex+'-'+pipeIndex).html("")

                                $('#table-5-customers-'+tournumberIndex+'-'+pipeIndex).find(".sign-customer-record").each(function() {
                                    $(this).prop("disabled", true)
                                })
                                if ($("#productId").val() === "NI") {
                                    disabledButtonsFile(`${tournumberIndex}-${pipeIndex}`, false);
                                }
                                disabledCustomerTable(tournumberIndex, pipeIndex, false);
                                ///JJGR
                                $('#btnPipeFillingManual-' + tournumberIndex + '-' + pipeIndex).attr('hidden', true);
                                $('#btnPipeFillingWeb-' + tournumberIndex + '-' + pipeIndex).attr('hidden', true);

                            }
                        });
                          //JJGR
                        $('#table-5-customers-' + tournumberIndex + '-' + pipeIndex).find("tbody tr").each(function (index) {
                            if (!isNullOrEmpty($("#PipeFillingCustomerAnalysisReport" + index + '-' + tournumberIndex + '-' + pipeIndex).val())) {
                                $('#btnPipeFillingManual-' + tournumberIndex + '-' + pipeIndex).removeAttr('hidden');
                                $('#btnPipeFillingWeb-' + tournumberIndex + '-' + pipeIndex).removeAttr('hidden');
                                $(`#btnPipeFillingSendEmail${index}-${tournumberIndex}-${pipeIndex}`).prop("hidden", false);
                            }
                        })
                        //productoNoconforme
                        if (($("#PipeFillingInComplianceCheckFalse-" + tournumberIndex + '-' + pipeIndex).prop("checked"))) {
                            $('#PipeFillingReportPNCFolio-' + tournumberIndex + '-' + pipeIndex).removeAttr("disabled")
                            $('#PipeFillingReportPNCNotes-' + tournumberIndex + '-' + pipeIndex).removeAttr("disabled")
                            $('#PipeFillingReleasedCheckTrue-' + tournumberIndex + '-' + pipeIndex).prop("disabled", true)
                        }
                    })
                }
                })
        }

        function loadSavedDataTable5() {
            $("#pipeFilling-container .tab-content .tab-pane").each(function () {
                let controlType = $(this).attr("data-type")
                let tournumberIndex = $(this).attr("data-index")

                if (controlType === 'tournumber') {
                    $(this).find(".tab-content .tab-pane").each(function () {
                        let pipeIndex = $(this).attr("data-index")
                        let CheckListSource = $(this).find("#CheckListSource-" + tournumberIndex + '-' + pipeIndex).val()
                        let CheckListStatus = $(this).find("#CheckListStatus-" + tournumberIndex + '-' + pipeIndex).val()
                        if (CheckListStatus === "CL-Cerrado cumple" || CheckListStatus === "CL-Cerrado no cumple")
                        {
                            $('#btnPipeFillingManual-' + tournumberIndex + '-' + pipeIndex).prop("disabled", false)
                            $('#btnPipeFillingWeb-' + tournumberIndex + '-' + pipeIndex).prop("disabled", false)
                        }
                        else
                        {

                            let checkedCheckListInComplianceCheck = $(this).find("#CheckListIncompliance-" + tournumberIndex + '-' + pipeIndex).val()
                            if (CheckListSource === "True") {
                                $('#btnPipeFillingManual-' + tournumberIndex + '-' + pipeIndex).prop("disabled", true)
                            }

                            if (checkedCheckListInComplianceCheck === "True") {
                                $(this).find("#CheckListIncomplianceCheckTrue-" + tournumberIndex + '-' + pipeIndex).prop("checked", true)
                                $(this).find("#CheckListIncomplianceCheckFalse-" + tournumberIndex + '-' + pipeIndex).prop("checked", false)
                                //$('#btnPipeFillingWeb-' + tournumberIndex + '-' + pipeIndex).prop("disabled", true)
                            }
                            else if (checkedCheckListInComplianceCheck === "False") {
                                $(this).find("#CheckListIncomplianceCheckTrue-" + tournumberIndex + '-' + pipeIndex).prop("checked", false)
                                $(this).find("#CheckListIncomplianceCheckFalse-" + tournumberIndex + '-' + pipeIndex).prop("checked", true)
                                //$('#btnPipeFillingWeb-' + tournumberIndex + '-' + pipeIndex).prop("disabled", true)
                            }
                        }
                        //bloq elements
                        if ($("#Status").val() === "OA-Cancelada" || $("#Status").val() === "OA-Liberada" || $("#Status").val() === "OA-Rechazada") {
                            $('#btnPipeFillingManual-' + tournumberIndex + '-' + pipeIndex).prop("disabled", true)
                            $('#btnPipeFillingWeb-' + tournumberIndex + '-' + pipeIndex).prop("disabled", true)
                        }
                        let pipeFillingInComplianceCheck = $(this).find("#PipeFillingInCompliance-"+tournumberIndex+'-'+pipeIndex).val()
                        if(pipeFillingInComplianceCheck === "True")
                        {
                            $(this).find("#PipeFillingInComplianceCheckTrue-"+tournumberIndex+'-'+pipeIndex).prop("checked", true)
                            $(this).find("#PipeFillingInComplianceCheckFalse-"+tournumberIndex+'-'+pipeIndex).prop("checked", false)
                        }
                        else if(pipeFillingInComplianceCheck === "False")
                        {
                            $(this).find("#PipeFillingInComplianceCheckTrue-"+tournumberIndex+'-'+pipeIndex).prop("checked", false)
                            $(this).find("#PipeFillingInComplianceCheckFalse-"+tournumberIndex+'-'+pipeIndex).prop("checked", true)
                        }
                        let pipeFillingFinalAnalysiIsReleasedsCheck = $(this).find("#PipeFillingIsReleased-"+tournumberIndex+'-'+pipeIndex).val()
                        if(pipeFillingFinalAnalysiIsReleasedsCheck === "True")
                        {
                            $(this).find("#PipeFillingReleasedCheckTrue-" + tournumberIndex + '-' + pipeIndex).prop("checked", true).attr("disabled", true);
                            $(this).find("#PipeFillingReleasedCheckFalse-" + tournumberIndex + '-' + pipeIndex).prop("checked", false).attr("disabled", true);

                            $('#table-5-customers-'+tournumberIndex+'-'+pipeIndex).find(".sign-customer-record").each(function() {
                                $(this).prop("disabled", false)
                            })
                            if ($("#productId").val() === "NI") {
                                disabledButtonsFile(`${tournumberIndex}-${pipeIndex}`, true);
                            }
                        }
                        else if(pipeFillingFinalAnalysiIsReleasedsCheck === "False")
                        {
                            $(this).find("#PipeFillingReleasedCheckTrue-" + tournumberIndex + '-' + pipeIndex).prop("checked", false).attr("disabled", true);
                            $(this).find("#PipeFillingReleasedCheckFalse-" + tournumberIndex + '-' + pipeIndex).prop("checked", true).attr("disabled", true);

                            $('#table-5-customers-'+tournumberIndex+'-'+pipeIndex).find(".sign-customer-record").each(function() {
                                $(this).prop("disabled", true)
                            })
                            if ($("#productId").val() === "NI") {
                                disabledButtonsFile(`${tournumberIndex}-${pipeIndex}`, true);
                            }
                            disabledCustomerTable(tournumberIndex, pipeIndex, true);
                        }
                        let roles = false;
                        roles = '@rolesUsr.Contains(SecurityConstants.PERFIL_RESPONSABLE_SANITARIO)'
                        if (roles == 'False') {
                            $(this).find("#PipeFillingReleasedCheckTrue-" + tournumberIndex + '-' + pipeIndex).attr("disabled", true);
                            $(this).find("#PipeFillingReleasedCheckFalse-" + tournumberIndex + '-' + pipeIndex).attr("disabled", true);
                        }

                        let pipeFillingAnalyzedBy = $(this).find("#PipeFillingAnalyzedBy-"+tournumberIndex+'-'+pipeIndex).val()
                        let pipeFillingAnalyzedDateString = $(this).find("#PipeFillingAnalyzedDate-"+tournumberIndex+'-'+pipeIndex).val()
                        let pipeFillingAnalyzedDate = !isNullOrEmpty(pipeFillingAnalyzedDateString) ? new Date(pipeFillingAnalyzedDateString) : null
                        $('#PipeFillingAnalyzedSignature-'+tournumberIndex+'-'+pipeIndex).html(getSignature(pipeFillingAnalyzedBy, pipeFillingAnalyzedDate))
                        let pipeFillingReleasedBy = $(this).find("#PipeFillingReleasedBy-"+tournumberIndex+'-'+pipeIndex).val()
                        let pipeFillingReleasedDateString = $(this).find("#PipeFillingReleasedDate-"+tournumberIndex+'-'+pipeIndex).val()
                        let pipeFillingReleasedDate = !isNullOrEmpty(pipeFillingReleasedDateString) ? new Date(pipeFillingReleasedDateString) : null
                        $('#PipeFillingReleasedSignature-'+tournumberIndex+'-'+pipeIndex).html(getSignature(pipeFillingReleasedBy, pipeFillingReleasedDate))

                        $("#table-5-customers-"+tournumberIndex+'-'+pipeIndex).find("tbody tr").each(function (index) {
                let reviewedBy = $(this).find("#PipeFillingCustomerReviewedBy"+index+'-'+tournumberIndex+'-'+pipeIndex).val()
                            let reviewedDateString = $(this).find("#PipeFillingCustomerReviewedDate"+index+'-'+tournumberIndex+'-'+pipeIndex).val()
                            let reviewedDate = !isNullOrEmpty(reviewedDateString) ? new Date(reviewedDateString) : null
                            let reviewedSignature = getSignature(reviewedBy, reviewedDate)
                            $(this).find("#PipeFillingCustomerReviewedSignature"+index+'-'+tournumberIndex+'-'+pipeIndex).html(reviewedSignature)

                            if (!isNullOrEmpty(reviewedBy) || !isNullOrEmpty(reviewedDateString)) {
                                $(this).find("#btnPipeFillingCustomerReviewedSignature"+index+'-'+tournumberIndex+'-'+pipeIndex).prop('hidden', true)
                            }
                //productoNoconforme
                if (($("#PipeFillingInComplianceCheckFalse-" + tournumberIndex + '-' + pipeIndex).prop("checked"))) {
                                $('#PipeFillingReportPNCFolio-' + tournumberIndex + '-' + pipeIndex).removeAttr("disabled")
                                $('#PipeFillingReportPNCNotes-' + tournumberIndex + '-' + pipeIndex).removeAttr("disabled")
                                $('#PipeFillingReleasedCheckTrue-' + tournumberIndex + '-' + pipeIndex).prop("disabled", true)
                            }
                           });
                    })
                }
            })

            $("#pipeFilling-tourNumber-tab-0").tab('show')
            $("#pipeFilling-pipe-tab-0-0").tab('show')
            //AHF
            const filesInitial = $('[id^=PipeFillingInitialAnalysisPath]');
            if (!!filesInitial && !!filesInitial.length) {
                $.each(filesInitial, (index, x) => {
                    if (!!x.value) {
                        const id = x.id.replace("PipeFillingInitialAnalysisPath", "");
                        $(`#btnuploadInitialFile${id}`).hide();
                        $(`#btndeleteInitialFile${id}`).show();
                        $(`#btnshowInitialFile${id}`).show();
                    }
                });
            }
            const filesFinal = $('[id^=PipeFillingFinalAnalysisPath]');
            if (!!filesFinal && !!filesFinal.length) {
                $.each(filesFinal, (index, x) => {
                    if (!!x.value) {
                        const id = x.id.replace("PipeFillingFinalAnalysisPath", "");
                        $(`#btnuploadFinalFile${id}`).hide();
                        $(`#btndeleteFinalFile${id}`).show();
                        $(`#btnshowFinalFile${id}`).show();
                    }
                });
            }
            if ($("#Status").val() === "OA-Liberada") {
                enableStep4(true);
            }
        }
        //AHF
        function readFile(analisis, input, id) {
            if (!!input.files && !!input.files.length) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $(`#PipeFilling${analisis}AnalysisAtributoValue${id}`).val(e.target.result);
                    const file = input.files[0];
                    var objectURL = URL.createObjectURL(file);
                    $(`#PipeFilling${analisis}AnalysisPath${id}`).val(objectURL);
                    $(`#PipeFilling${analisis}AnalysisAtributoLink${id}`).attr({ 'download': file.name, 'href': objectURL, 'target': '_blank' });
                    $(`#PipeFilling${analisis}AnalysisFileText${id}`).val(file.name);
                    $(`#PipeFilling${analisis}AnalysisPath${id}`).val(file.name);
                    $(`#btnupload${analisis}File${id}`).hide();
                    $(`#btndelete${analisis}File${id}`).show();
                    $(`#btnshow${analisis}File${id}`).show();
                };
                reader.readAsDataURL(input.files[0]);
            }
        }
        function showFile(analisis, index) {
            if (!!$(`#PipeFilling${analisis}AnalysisAtributoValue${index}`).val()) {
                $(`#PipeFilling${analisis}AnalysisAtributoLink${index}`)[0].click();
            } else {
                $(`#PipeFilling${analisis}ShowLink${index}`)[0].click();
            }
        }
        function uploadFile(analisis, index) {
            $(`#PipeFilling${analisis}AnalysisFile${index}`).click();
        }
        function removeFile(analisis, index) {
            $(`#btnupload${analisis}File${index}`).show();
            $(`#btndelete${analisis}File${index}`).hide();
            $(`#btnshow${analisis}File${index}`).hide();
            $(`#PipeFilling${analisis}AnalysisFileText${index}`).val('');
            $(`#PipeFilling${analisis}AnalysisFile${index}`).val(null);
        }
        function successCloseOA() {
            $('#step1').find('button').each(function () {
                $(this).prop("disabled", true);
            });
            $('#step2').find('button').each(function () {
                $(this).prop("disabled", true);
            });
            $('#step5').find('button').each(function () {
                $(this).prop("disabled", true);
            });
            $('#step6').find('button').each(function () {
                $(this).prop("disabled", true);
            });
            $('#step1').find('input').each(function () {
                $(this).prop("disabled", true);
            });
            $('#step2').find('input').each(function () {
                $(this).prop("disabled", true);
            });
            enableStep3(true);
            enableStep4(true);
            $('#step5').find('input').each(function () {
                $(this).prop("disabled", true);
            });
            $('#step6').find('input').each(function () {
                $(this).prop("disabled", true);
            });
            $('#ModalCloseOA').modal('hide');
            $('#btnOpenOrder').removeAttr('hidden');
            $('#btnOpenOrder').prop("disabled", false);
            $("#btnCloseOrder").attr("hidden", true);
            $("#BtnCancelar").attr("hidden", true);
            $("#Guardar").attr("hidden", true);
        }
        function successOpenOA() {
            var reviewedDate = new Date(Date.now())
            $('#ReleasedBy').val("")
            $('#ReleasedDate').val("")
            $('#ReleasedSignature').html("")
            $('#btnReleasedSignature').prop('hidden', false)
            $('#step5').find('button').each(function () {
                $(this).prop("disabled", false);
            });
            $('#step6').find('button').each(function () {
                $(this).prop("disabled", false);
            });
            enableStep3(false);
            enableStep4(false);
            $('#step5').find('input').each(function () {
                $(this).prop("disabled", false);
            });
            $('#step6').find('input').each(function () {
                $(this).prop("disabled", false);
            });
            $('#ModalOpenOA').modal('hide');
            $("#btnOpenOrder").attr("hidden", true);
            $("#BtnCancelar").removeAttr("hidden");
            $("#Guardar").removeAttr("hidden");
        }
        function queryLogStatusOrder() {
            $("#imgLoadingLog").show();
            $("#table-estatus").hide();
            $.ajax({
                async: true,
                type: "GET",
                url: "/ConditioningOrder/QueryLogStatusOrder?Id=" + @Model.Id,
                success: function (response) {
                    $("#divLogStatusOrder").html(response);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error(jqXHR);
                    $.gritter.add({
                        title: "Ocurrió un error",
                        text: "Surgio un error al consultar el Historico de Estatus.",
                        class_name: "gritter-light"
                    });
                    $("#imgLoadingLog").hide();
                    $("#table-estatus").show();
                }
            });
        }
        function addWeights() {
            const tables = $("[id^=table-5]");
            let arrayTotal = [];
            $.each(tables, (index, item) => {
                const id = item.id;
                let total = 0;
                $(`#${id} tbody tr`).each(function (i) {
                    total += +$(this).find("td:eq(4)")[0].outerText.toUpperCase().replace("KG", "");
                });
                arrayTotal.push(total);
            });
            const sumTotals = !!arrayTotal && !!arrayTotal.length ? arrayTotal.filter(function (item) { return !!item; }).reduce((total, current) => total + current) : 0;
            $("#table-6 tbody tr").each(function (i) {
                const idInput1 = $(this).find("td:eq(2) input")[0].id;
                $(this).find("td:eq(2)")[0].innerHTML = `<input id='${idInput1}' hidden="hidden" value="${sumTotals}" />${sumTotals}`;
                const lote = parseFloat($(this).find("td:eq(1) input").val());
                const resultado = lote - sumTotals;
                let resultDecimals = resultado.toFixed(2);
                if (!isNaN(resultDecimals)) {
                    const idInput2 = $(this).find("td:eq(3) input")[0].id;
                    $(this).find("td:eq(3)")[0].innerHTML = `<input id='${idInput2}' hidden="hidden" value="${resultDecimals}" />${resultDecimals}`;
                }
            });
        }
        function validationFiles(fileDto) {
            if (!!fileDto && !!fileDto.length) {
                $.each(fileDto, (index, x) => {
                    if (x.type == "InitialAnalysis") {
                        $(`#PipeFillingInitialAnalysisAtributoValue${x.inputId}`).val("");
                        $(`#PipeFillingInitialAnalysisFileText${x.inputId}`).val(x.fileName);
                        $(`#PipeFillingInitialShowLink${x.inputId}`).attr("href", `/ConditioningOrder/DownloadFile?path=${x.fileName}`)
                    } else {
                        $(`#PipeFillingFinalAnalysisAtributoValue${x.inputId}`).val("");
                        $(`#PipeFillingFinalAnalysisFileText${x.inputId}`).val(x.fileName);
                        $(`#PipeFillingFinalShowLink${x.inputId}`).attr("href", `/ConditioningOrder/DownloadFile?path=${x.fileName}`);
                    }
                });
            }
        }
        function validationFileRequired(id) {
            const initialFile = $(`#table-5-initial-analysis-details-${id} tbody`).find("[id^=PipeFillingInitialAnalysisFileText]")[0].value;
            const finalFile = $(`#table-5-final-analysis-details-${id} tbody`).find("[id^=PipeFillingFinalAnalysisFileText]")[0].value;
            return (!!initialFile && initialFile.includes(".pdf") && !!finalFile && finalFile.includes(".pdf"));
        }
        function dismissFileCheckList() {
            const isSaved = $("#flagSavedFileCheckList").val();
            if (isSaved !== "true") {
                const id = $('#IndexCheckListModal').val();
                if ($("#CheckListModal").val() === "true") {
                    $(`#CheckListIncomplianceCheckTrue-${id}`).prop('checked', false);
                } else {
                    $(`#CheckListIncomplianceCheckFalse-${id}`).prop('checked', false);
                }
            } else {
                $("#flagSavedFileCheckList").val("false");
            }
            $("#fileUpload").val(null);
        }
        function disabledButtonsFile(id, flag) {
            if ($(`#table-5-initial-analysis-details-${id} tbody`).find("[id^=btnuploadInitialFile]")[0] != undefined) {
                $(`#table-5-initial-analysis-details-${id} tbody`).find("[id^=btnuploadInitialFile]")[0].disabled = flag;
                $(`#table-5-initial-analysis-details-${id} tbody`).find("[id^=btndeleteInitialFile]")[0].disabled = flag;
                $(`#table-5-final-analysis-details-${id} tbody`).find("[id^=btnuploadFinalFile]")[0].disabled = flag;
                $(`#table-5-final-analysis-details-${id} tbody`).find("[id^=btndeleteFinalFile]")[0].disabled = flag;
            }
        }
        function removeSignTable6() {
            const signed = $("[id^=PerformanceListId]");
            if (!!signed && !!signed.length) {
                $.each(signed, (index, x) => {
                    const id = x.id.replace("PerformanceListId", "");
                    $(`#PerformanceListReviewedBy${id}`).val('');
                    $(`#PerformanceListReviewedDate${id}`).val('');
                    $(`#PerformanceListReviewedSignature${id}`).html('');
                    $(`#btnPerformanceListReviewedSignature${id}`).attr('hidden', false);
                });
            }
        }
        function enableStep4(enable) {
            $("#btnCheklistRel").prop("disabled", enable);
            $("#pipeFilling-container .tab-content .tab-pane").each(function () {
                const controlType = $(this).attr("data-type");
                const tournumberIndex = $(this).attr("data-index");
                if (controlType === 'tournumber') {
                    $(this).find(".tab-content .tab-pane").each(function () {
                        const pipeIndex = $(this).attr("data-index");
                        $(`#btnPipeFillingWeb-${tournumberIndex}-${pipeIndex}`).prop("disabled", enable);
                        //$(`#btnPipeFillingUpdate-${tournumberIndex}-${pipeIndex}`).prop("disabled", enable);
                        $(`#btnPipeFillingManual-${tournumberIndex}-${pipeIndex}`).prop("disabled", enable);
                        $(`#btnPipeFillingRead-${tournumberIndex}-${pipeIndex}`).prop("disabled", enable);
                        //$(`#btnPipeFillingShowHistory-${tournumberIndex}-${pipeIndex}`).prop("disabled", enable);
                        if (!!enable) {
                            $(`#table-5-customers-${tournumberIndex}-${pipeIndex} tbody`).find("input").each(function () {
                                $(this).prop("disabled", enable);
                            });
                        }
                    });
                }
            });
        }
        function disabledReleaseCheck() {
            const checkTrue = $("[id^=PipeFillingReleasedCheckTrue]");
            if (!!checkTrue && !!checkTrue.length) {
                $.each(checkTrue, (index, item) => {
                    item.disabled = true;
                });
            }
            const checkFalse = $("[id^=PipeFillingReleasedCheckFalse]");
            if (!!checkFalse && !!checkFalse.length) {
                $.each(checkFalse, (index, item) => {
                    item.disabled = true;
                });
            }
        }
        function disabledReleaseCheckModified() {
            const checkTrue = $("[id^=PipeFillingReleasedCheckTrue]");
            if (!!checkTrue && !!checkTrue.length) {
                $.each(checkTrue, (index, item) => {
                    const id = item.id.replace("PipeFillingReleasedCheckTrue", "");
                    if (!!item.checked || !!$(`#PipeFillingReleasedCheckFalse${id}`).prop("checked")) {
                        item.disabled = true;
                        $(`#PipeFillingReleasedCheckFalse${id}`).attr("disabled", true);
                    }
                });
            }
        }
        function enableStep3(enable) {
            $('#divButtonsPanel').find('button').each(function () {
                $(this).prop("disabled", enable);
            });
            $('#divButtonsPanel').find('label').each(function () {
                $(this).prop("disabled", enable);
            });
        }
        function validateTable4() {
            const flag = $("#table-4 tbody tr").length <= 0 && $("#StatusLbl2").text() === "OA-En proceso";
            $("#btnCloseOrderSimple").attr("hidden", !flag);
            $("#btnCloseOrderSimple").attr("disabled", !flag);
        }
        function disabledCustomerTable(tournumber, pipeIndex, flag) {
            $(`#table-5-customers-${tournumber}-${pipeIndex} tbody tr`).each(function (index) {
                $(`#btnPipeFillingCustomerReviewedSignature${index}-${tournumber}-${pipeIndex}`).attr("hidden", flag);
                $(`#PipeFillingCustomerEmailsList${index}-${tournumber}-${pipeIndex}`).attr("disabled", flag);
                $(`#PipeFillingCustomerNotes${index}-${tournumber}-${pipeIndex}`).attr("disabled", flag);
                $(`#spanSignature${index}-${tournumber}-${pipeIndex}`).attr("hidden", !flag);
                $(`#spanReport${index}-${tournumber}-${pipeIndex}`).attr("hidden", !flag);
            });
            }
        function rechazar() {
            $('#ModalReleaseFalse').modal('hide');
            const pipeIndex = $("#pipeIndex").val();
            const tournumberIndex = $("#tourIndex").val();
            // Validate Checklist status
            var checklistStatus = $("#PipeFillingCheckListStatus-"+tournumberIndex+'-'+pipeIndex).val()

            if ($("#productId").val() === "NI" && !validationFileRequired(`${tournumberIndex}-${pipeIndex}`)) {
                $(this).prop('checked', false);
                $('#ModalMensajesLabel').html('Error');
                $('#mbody').text("Se necesita completar los cromatogramas de análisis para Liberar.");
                $('#ModalMensajes').modal('show');
                $("#PipeFillingReleasedCheckFalse-" + tournumberIndex + '-' + pipeIndex).prop("checked", false);
                return;
            }
            $('#PipeFillingReleasedCheckTrue-'+tournumberIndex+'-'+pipeIndex).prop('checked', false);

            var reviewedDate = new Date(Date.now());
            $('#PipeFillingReleasedBy-'+tournumberIndex+'-'+pipeIndex).val("@userFirstName")
            $('#PipeFillingReleasedDate-'+tournumberIndex+'-'+pipeIndex).val(getDateString(reviewedDate))
            $('#PipeFillingReleasedSignature-'+tournumberIndex+'-'+pipeIndex).html(getSignature("@userFirstName", reviewedDate))

            $('#table-5-customers-'+tournumberIndex+'-'+pipeIndex).find(".sign-customer-record").each(function() {
                $(this).prop("disabled", true)
            })
            if ($("#productId").val() === "NI") {
                disabledButtonsFile(`${tournumberIndex}-${pipeIndex}`, true);
            }
            disabledCustomerTable(tournumberIndex, pipeIndex, true);
            ///JJGR
            if (!isNullOrEmpty(checklistStatus)) {
                $('#btnPipeFillingManual-' + tournumberIndex + '-' + pipeIndex).removeAttr('hidden');
                $('#btnPipeFillingWeb-' + tournumberIndex + '-' + pipeIndex).removeAttr('hidden');
            }

            $("#PipeFillingReleasedCheckFalse-" + tournumberIndex + '-' + pipeIndex).prop("disabled", true)
            $("#PipeFillingReleasedCheckTrue-" + tournumberIndex + '-' + pipeIndex).prop("disabled", true)
        }
        function cancelarRechazar() {
            const pipeIndex = $("#pipeIndex").val();
            const tournumberIndex = $("#tourIndex").val();
            $("#PipeFillingReleasedCheckFalse-" + tournumberIndex + '-' + pipeIndex).prop("checked", false);
            ///JJGR
            $('#btnPipeFillingManual-' + tournumberIndex + '-' + pipeIndex).attr('hidden', true);
            $('#btnPipeFillingWeb-' + tournumberIndex + '-' + pipeIndex).attr('hidden', true);
        }
        function notificationConfirm() {
            $("#imgLoadingConfirmNotificacion").show();
            $("#btnNotificationConfirm").prop("hidden", true);
            $.ajax({
                type: "POST",
                url: "/ConditioningOrder/SendNotificationConfirm/",
                async: true,
                data: {
                    __RequestVerificationToken: $("[name='__RequestVerificationToken']").val(),
                    "Id": @Model.Id,
                    "LotProd": '@Model.LotProd',
                    "PlantId": '@Model.PlantId',
                    "PipeFillingControl": serializeTable7(),
                    "ProductionOrderId": '@Model.ProductionOrderId'
                },
                dataType: "json",
                success: function (response) {
                    if (response.result === "Ok") {
                        $.gritter.add({
                            title: "Mensaje",
                            text: response.message,
                            class_name: "gritter-light"
                        });
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error(jqXHR);
                    $.gritter.add({
                        title: "Ocurrió un error",
                        text: "Surgio un error al enviar la notificación.",
                        class_name: "gritter-light"
                    });
                },
                complete: function (jqXHR, textStatus) {
                    $("#imgLoadingConfirmNotificacion").hide();
                    $("#btnNotificationConfirm").prop("hidden", false);
                }
            });
        }
        function serializeTable7() {
            let pipeFillingControlList = []
            $("#pipeFilling-container .tab-content .tab-pane").each(function () {
                let controlType = $(this).attr("data-type")
                let tournumberIndex = $(this).attr("data-index")

                if (controlType === 'tournumber') {
                    pipeFillingControl = {
                        "TourNumber": $("#PipeFillingTourNumber-" + tournumberIndex).val(),
                        "PipesList": []
                    };
                    $(this).find(".tab-content .tab-pane").each(function () {
                        let pipeIndex = $(this).attr("data-index");
                        pipeFillingControl.PipesList.push({
                            "TourNumber": $("#PipeFillingTourNumber-" + tournumberIndex).val(),
                            "PipeNumber": $(this).find("#PipeFillingPipeNumber-" + tournumberIndex + '-' + pipeIndex).val(),
                            "CheckListStatus": $(this).find("#PipeFillingCheckListStatus-" + tournumberIndex + '-' + pipeIndex).val(),
                            "CheckListIncompliance": getCheckboxPairValue($(this).find("#CheckListIncomplianceCheckTrue" + tournumberIndex + '-' + pipeIndex), $(this).find("#CheckListIncomplianceCheckFalse" + tournumberIndex + '-' + pipeIndex)),
                            "Date": $(this).find("#PipeFillingDate-" + tournumberIndex + '-' + pipeIndex).val(),
                            "InitialWeight": $(this).find("#PipeFillingInitialWeight-" + tournumberIndex + '-' + pipeIndex).val(),
                            "FinalWeight": $(this).find("#PipeFillingFinalWeight-" + tournumberIndex + '-' + pipeIndex).val(),
                            "DiffWeight": $(this).find("#PipeFillingDiffWeight-" + tournumberIndex + '-' + pipeIndex).val(),
                            "InitialAnalysis": [],
                            "FinalAnalysis": [],
                            "AnalyzedBy": $(this).find("#PipeFillingAnalyzedBy-" + tournumberIndex + '-' + pipeIndex).val(),
                            "AnalyzedDate": $(this).find("#PipeFillingAnalyzedDate-" + tournumberIndex + '-' + pipeIndex).val(),
                            "InitialAnalyzedDate": $(this).find("#PipeFillingInitialAnalyzedDate-" + tournumberIndex + '-' + pipeIndex).val(),
                            "FinalAnalyzedDate": $(this).find("#PipeFillingFinalAnalyzedDate-" + tournumberIndex + '-' + pipeIndex).val(),
                            "DueDate": $(this).find("#PipeFillingDueDate-" + tournumberIndex + '-' + pipeIndex).val(),
                            "DistributionBatch": $(this).find("#PipeFillingDistributionBatch-" + tournumberIndex + '-' + pipeIndex).val(),
                            "InCompliance": getCheckboxPairValue($("#PipeFillingInComplianceCheckTrue-" + tournumberIndex + '-' + pipeIndex), $("#PipeFillingInComplianceCheckFalse-" + tournumberIndex + '-' + pipeIndex)),
                            "ReportPNCFolio": $(this).find("#PipeFillingReportPNCFolio-" + tournumberIndex + '-' + pipeIndex).val(),
                            "ReportPNCNotes": $(this).find("#PipeFillingReportPNCNotes-" + tournumberIndex + '-' + pipeIndex).val(),
                            "IsReleased": getCheckboxPairValue($(this).find("#PipeFillingReleasedCheckTrue-" + tournumberIndex + '-' + pipeIndex), $(this).find("#PipeFillingReleasedCheckFalse-" + tournumberIndex + '-' + pipeIndex)),
                            "ReleasedBy": $(this).find("#PipeFillingReleasedBy-" + tournumberIndex + '-' + pipeIndex).val(),
                            "ReleasedDate": $(this).find("#PipeFillingReleasedDate-" + tournumberIndex + '-' + pipeIndex).val(),
                            "Customers": [],
                        });
                    });
                    pipeFillingControlList.push(pipeFillingControl);
                }
            });
            return pipeFillingControlList;
        }

        function SerchCheckList() {
            $.ajax({
                type: "GET",
                url: "/ConditioningOrder/SerchCheckList/?Id=@Model.Id" + "&option=1",
                success: function (response) {
                    if (response.result === "fail") {
                        $.gritter.add({
                            title: "",
                            text: response.message,
                            class_name: "gritter-light"
                        })
                    } else {
                        $("#showChecklist").html(response);
                        $("#ModalSearchCheckList").modal("show");
                    }
                },
            })
        }

        function CreateCheckList() {
            $.ajax({
                type: "GET",
                url: "/ConditioningOrder/CreateCheckList/?Id=@Model.Id",
                success: function (response) {
                    if (response.result === "fail") {
                        $.gritter.add({
                            title: "",
                            text: response.message,
                            class_name: "gritter-light"
                        })
                    }
                    else {
                        $.gritter.add({
                            title: "",
                            text: response.message,
                            class_name: "gritter-light"
                        })
                    }
                },
            })
        }

        function ShowModalRelChecklist() {
            $('#ModalSpinner').modal('show');

               $.ajax({
                   type: "GET",
                   url: "/ConditioningOrder/CheckListTourNumber/?Id=" + @Model.Id,
                   success: function (response) {
                    if (response.result === "fail") {
                        $.gritter.add({
                            title: "",
                            text: response.message,
                            class_name: "gritter-light"
                        })
                    }
                    else {

                        $('#modal-checklist-Web').modal('show');
                        $("#checklist-WebDiv").html(response);
                    }
                       $('#ModalSpinner').modal('hide');
                   },
            })
        }

        function getTournumber(selectObject) {
            console.log(selectObject.id);
            console.log(selectObject.value);
            var listItems = '<option selected="selected" value="0">-Por favor seleccione una Pipa</option>';
            if (isNullOrEmpty(selectObject.value)) {
                var splitVal = selectObject.id.split("-")[1];
                $('#PipeFillingPipeNumber-' + splitVal).val("");
                $("#SelectedPipeFilling-" + selectObject.id).html(listItems);
            }
            else {
                var value = selectObject.value;

                $.ajax({
                    type: "POST",
                    url: 'GetPipesCheckList?TourNumber=' + value,
                    data: serializeConditioningOrder(),
                    dataType: "json",
                    success: function (result) {
                        for (var i = 0; i < result.length; i++) {
                            listItems += "<option value='" + result[i].value + "'>" + result[i].text + "</option>";
                        }
                        var splitVal = selectObject.id.split("-")[1];
                        $('#SelectedPipeFilling-' + splitVal).html(listItems);
                        $('#PipeFillingControlTourNumber-' + splitVal).val(value);

                    },
                    error: function (e) {
                        console.log(e);
                        listItems = '<option selected="selected" value="0">Sin información</option>';
                        $("#SelectedPipeFilling-" + selectObject.id).html(listItems);
                    }
                })
            }
        }

        function getPipenumber(selectObject) {
            var listItems = '<option selected="selected" value="0">-Por favor seleccione una Pipa</option>';
            //console.log(selectObject.id + " ***");
            var value = selectObject.value;
            var pipeId = selectObject.id;
            var splitVal = selectObject.id.split("-")[1];
            $('#PipeFillingPipeNumber-' + splitVal).val(value);
            $.ajax({
                type: "POST",
                url: 'DuplicateOffPipesCheckList?TourNumber=' + $('#PipeFillingControlTourNumber-' + splitVal).val() + "&PipeNumber=" + $('#PipeFillingPipeNumber-' + splitVal).val(),
                data: serializeConditioningOrder(),
                dataType: "json",
                success: function (result) {
                    if (result.result === "Ok") {
                        //console.log("ok");
                    }
                    else {
                        //console.log("fail");
                        var option = $("option[value='" + value + "']", $('#SelectedPipeFilling-' + splitVal));
                        option.attr("disabled", "disabled");
                        $("#SelectedPipeFilling-" + splitVal).val([0]);
                        //for (var i = 0; i < result.length; i++) {
                        //    listItems += "<option value='" + result[i].value + "'>" + result[i].text + "</option>";
                        //}
                        //var splitVal = selectObject.id.split("-")[1];
                        //$('#SelectedPipeFilling-' + splitVal).html(listItems);
                        $('#PipeFillingPipeNumber-' + splitVal).val("Pipa ya relacionada al TourNumber");
                    }

                },
                error: function (e) {
                    console.log(e);
                    listItems = '<option selected="selected" value="0">Sin información</option>';
                    $('#PipeFillingPipeNumber-' + splitVal).val(value);
                }
            })

        }

        function SaveTourNumberPipeNumberRel() {
            return $.ajax({
                type: "POST",
                url: "/ConditioningOrder/SaveTourNumberPipeNumberRel/",
                data: serializeConditioningOrder(),
                dataType: "json",
                async: false,
                success: function (response) {
                    console.log(response);
                    if (response.result === "Ok") {

                    }
                    else {
                        $.gritter.add({
                            title: "Ocurrió un error",
                            text: response.message,
                            class_name: "gritter-light"
                        })
                    }
                }
            })

        }

        function DeleteChecklist(Id,option) {
               $.ajax({
                   type: "GET",
                   url: "/ConditioningOrder/DeleteChecklist/?Id=" + Id + "&ConditioningOrderId=" + @Model.Id + "&option=" + option,
                   success: function (response) {
                    if (response.result === "fail") {
                        $.gritter.add({
                            title: "",
                            text: response.message,
                            class_name: "gritter-light"
                        })
                    }
                    else {
                        if (option == 1) {
                            $("#showChecklist").html(response);
                        }
                        else {
                            $("#checklist-WebDiv").html(response);
                            $('#modal-checklist-Web').modal('hide');
                        }
                    }
                },
            })
        }

        async function GetCheckListIdWebManual(tourNumberIndex, pipeIndex, idOA, tourNumber, pipeNumber, distributionBatch) {
            var valorAccion
            await $.ajax({
                type: "GET",
                url: "/ConditioningOrder/GetCheckListIdWebManual/?idOA=" + idOA + "&tourNumber=" + tourNumber +
                    "&pipeNumber=" + pipeNumber + "&distributionBatch=" + distributionBatch,
                dataType: "json",
                async: false,
                success: function (response) {
                    console.log(response);
                    //valorAccion = response.message;
                    if (response.result == "Ok") {
                        $('#btnPipeFillingManual-' + tourNumberIndex + '-' + pipeIndex).removeAttr('hidden');
                        $('#btnPipeFillingWeb-' + tourNumberIndex + '-' + pipeIndex).removeAttr('hidden');

                        $('#btnPipeFillingManual-' + tourNumberIndex + '-' + pipeIndex).attr('onclick', "pipeFillingManual(@Model.Id," + tourNumber + "," + `'${pipeNumber}'` + "," + `'${distributionBatch}'` + "," + response.message + "," + pipeIndex + ")");
                        $('#btnPipeFillingWeb-' + tourNumberIndex + '-' + pipeIndex).attr('onclick', "pipeFillingWeb(@Model.Id," + tourNumber + "," + `'${pipeNumber}'` + "," + `'${distributionBatch}'` + "," + response.message + "," + pipeIndex + ")");
                    }
                    else {

                    }
                }
            });
            return valorAccion;
        }

        function SendStringsEmails(index, tourNumberIndex, pipeIndex, tourNumber, tank, distributionBatch) {
            const emails = $(`#PipeFillingCustomerEmailsList${index}-${tourNumberIndex}-${pipeIndex}`).val();
            $(`#btnPipeFillingSendEmail${index}-${tourNumberIndex}-${pipeIndex}`).prop("hidden", true);
            $(`#imgLoadingPipeFillingSendEmail${index}-${tourNumberIndex}-${pipeIndex}`).show();
            $.ajax({
                async: true,
                type: "POST",
                url: "/ConditioningOrder/SendNotification",
                data: {
                    __RequestVerificationToken: $("[name='__RequestVerificationToken']").val(),
                    "Id": '@Model.Id',
                    "ProductionOrderId": '@Model.ProductionOrderId',
                    "Emails": emails,
                    "TourNumber": tourNumber,
                    "LotProd": '@Model.LotProd',
                    "Tank": tank,
                    "Product":  $('#Product').val(),
                    "DistributionBatch": distributionBatch,
                    "PlantId": '@Model.PlantId',
                    "ProductId": '@Model.ProductId',
                    "Bill": $('#PipeFillingCustomerAnalysisReportLbl' + index + '-' + tourNumberIndex + '-' + pipeIndex).text()
                },
                dataType: "json",
                success: function (response) {
                    if (response.result === "Ok") {
                        $(`#checkIcon${index}-${tourNumberIndex}-${pipeIndex}`).html('<i class="fa fa-check" style="color: green"></i>');
                        $.gritter.add({
                            title: "Notificación enviada.",
                            class_name: "gritter-light"
                        });
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error(jqXHR);
                    $.gritter.add({
                        title: "Error",
                        text: "Surgio un error al enviar la notificación, favor de intentar más tarde.",
                        class_name: "gritter-light"
                    });
                },
                complete: function (jqXHR, textStatus) {
                    $(`#btnPipeFillingSendEmail${index}-${tourNumberIndex}-${pipeIndex}`).prop("hidden", false);
                    $(`#imgLoadingPipeFillingSendEmail${index}-${tourNumberIndex}-${pipeIndex}`).hide();
                }
            });
        }

        function ReleaseTable4(option, pipeIndex, tournumberIndex) {
            if (option == 1) {
             $('#ModalMensajesRelease').modal('hide');
             var checklistStatus = $("#PipeFillingCheckListStatus-" + tournumberIndex + '-' + pipeIndex).val();

                if (isNullOrEmpty(checklistStatus)) {
                    $('#ModalMensajesLabel').html('Error');
                    $('#mbody').text("Se necesita relacionar un checklist");
                    $('#ModalMensajes').modal('show');
                    $('#PipeFillingReleasedCheckTrue-' + tournumberIndex + '-' + pipeIndex).prop('checked', false);
                    event.stopPropagation();
                    return;
                }
             if ($("#productId").val() === "NI" && !validationFileRequired(`${tournumberIndex}-${pipeIndex}`)) {
                 $(this).prop('checked', false);
                 $('#ModalMensajesLabel').html('Error');
                 $('#mbody').text("Se necesita completar los cromatogramas de análisis para Liberar.");
                 $('#ModalMensajes').modal('show');
                 event.stopPropagation();
                 return;
             }
             $('#PipeFillingReleasedCheckFalse-' + tournumberIndex + '-' + pipeIndex).prop('checked', false);

             let reviewedDate = new Date(Date.now());
             $('#PipeFillingReleasedBy-'+tournumberIndex+'-'+pipeIndex).val("@userFirstName")
             $('#PipeFillingReleasedDate-'+tournumberIndex+'-'+pipeIndex).val(getDateString(reviewedDate))
             $('#PipeFillingReleasedSignature-'+tournumberIndex+'-'+pipeIndex).html(getSignature("@userFirstName", reviewedDate))

             $('#table-5-customers-' + tournumberIndex + '-' + pipeIndex).find(".sign-customer-record").each(function () {
                 $(this).prop("disabled", false)
             });
             if ($("#productId").val() === "NI") {
                 disabledButtonsFile(`${tournumberIndex}-${pipeIndex}`, true);
             }
             disabledCustomerTable(tournumberIndex, pipeIndex, false);
             ///JJGR
             $('#btnPipeFillingManual-' + tournumberIndex + '-' + pipeIndex).attr('hidden', true);
                $('#btnPipeFillingWeb-' + tournumberIndex + '-' + pipeIndex).attr('hidden', true);
                $("#PipeFillingReleasedCheckFalse-" + tournumberIndex + '-' + pipeIndex).prop("disabled", true)
                $("#PipeFillingReleasedCheckTrue-" + tournumberIndex + '-' + pipeIndex).prop("disabled", true)
            }
            else {
                $('#PipeFillingReleasedBy-' + tournumberIndex + '-' + pipeIndex).val('')
                $('#PipeFillingReleasedDate-' + tournumberIndex + '-' + pipeIndex).val('')
                $('#PipeFillingReleasedSignature-' + tournumberIndex + '-' + pipeIndex).html("")

                $('#table-5-customers-' + tournumberIndex + '-' + pipeIndex).find(".sign-customer-record").each(function () {
                    $(this).prop("disabled", true);
                })
                $('#PipeFillingReleasedCheckTrue-' + tournumberIndex + '-' + pipeIndex).prop('checked', false);

            }
        }
        function uploadCustomerFiles(tourNumber, distributionBatch, pipeNumber, tournumberIndex, pipeIndex) {
            myDropzone.removeAllFiles();
            $("#dropzoneTournumber").val(tourNumber);
            $("#dropzoneDistributionBatch").val(distributionBatch);
            $("#dropzonePipeNumber").val(pipeNumber);
            $("#dropzoneTournumberIndex").val(tournumberIndex);
            $("#dropzonePipeIndex").val(pipeIndex);
            $("#modalUploadFileCustomers").modal({
                backdrop: 'static',
                keyboard: false
            }, "show");
        }
        function DeleteCustomerFiles(customersUploadIndex,tournumberIndex,pipeIndex,tourNumber,distributionBatch,pipeNumber,name) {
            $.ajax({
                type: "POST",
                url: "/ConditioningOrder/DeleteCustomerFile/",
                async: true,
                data: {
                    __RequestVerificationToken: $("[name='__RequestVerificationToken']").val(),
                    "ConditioningOrderId": @Model.Id,
                    "FileName": name
                },
                dataType: "json",
                success: function (response) {
                    if (response.result === "Ok") {
                        $.gritter.add({
                            title: "Mensaje",
                            text: response.message,
                            class_name: "gritter-light"
                        });
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error(jqXHR);
                    $.gritter.add({
                        title: "Ocurrió un error",
                        text: "Surgio un error al eliminar archivo.",
                        class_name: "gritter-light"
                    });
                },
                complete: function (jqXHR, textStatus) {
                        $("#LblActive-" + customersUploadIndex + '-' + tournumberIndex + '-' + pipeIndex).removeAttr("class");
                        $("#LblActive-" + customersUploadIndex + '-' + tournumberIndex + '-' + pipeIndex).text("Eliminado");
                        $("#CustomersFilesId-" + customersUploadIndex + '-' + tournumberIndex + '-' + pipeIndex).remove();
                }
            });
        }
        function addRowToTableFile(index, fileName, tournumber, distributionBatch, pipeNumber, tourNumberIndex, pipeIndex, fileNameGuid) {
            $(`#table-5-customers-Upload-${tourNumberIndex}-${pipeIndex} > tbody:last-child`).append(`<tr id="CustomersFilesId-${fileNameGuid.id}-${tourNumberIndex}-${pipeIndex}"><td><a href='/ConditioningOrder/DownloadFileCustomer?FileName=${fileNameGuid.fileName}' target='popup'>${fileNameGuid.fileNameOrigin}</a></td><td><label onclick="DeleteCustomerFiles(${fileNameGuid.id},${tourNumberIndex},${pipeIndex}, ${tournumber}, '${distributionBatch}', '${pipeNumber}', '${fileNameGuid.fileName}')" class="fa fa-window-close" id="LblActive-${index}-${tourNumberIndex}-${pipeIndex}">Eliminar</label></td></tr>`);
        }
    </script>
    }
    <style>
        .iconCustom {
            margin-right: 8px !important;
        }

        .dropzone {
            position: relative;
            border-radius: 5px;
            border: 4px dashed rgb(0, 85, 145);
            padding: 0px;
            background: bottom;
        }

            .dropzone .dz-preview {
                position: relative;
                display: inline-block;
                width: 120px;
                margin: 0.5em;
                font-size: 15px;
            }

                .dropzone .dz-preview .dz-progress {
                    display: block;
                    height: 15px;
                    border: 1px solid #aaa;
                    font-size: 15px;
                    top: 63%;
                }

                    .dropzone .dz-preview .dz-progress .dz-upload {
                        display: block;
                        height: 100%;
                        width: 0;
                        background: gray;
                    }

                .dropzone .dz-preview .dz-error-message {
                    color: white;
                    display: none;
                }

                .dropzone .dz-preview.dz-error .dz-error-message, .dropzone .dz-preview.dz-error .dz-error-mark {
                    display: block;
                }

                .dropzone .dz-preview.dz-success .dz-success-mark {
                    display: block;
                }

                .dropzone .dz-preview .dz-error-mark, .dropzone .dz-preview .dz-success-mark {
                    position: absolute;
                    display: none;
                    left: 30px;
                    top: 30px;
                    width: 54px;
                    height: 58px;
                    left: 50%;
                    margin-left: -27px;
                }

                .dropzone .dz-preview .dz-details {
                    top: -6px;
                }
    </style>
