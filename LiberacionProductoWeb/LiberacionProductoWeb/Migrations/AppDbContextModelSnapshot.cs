// <auto-generated />
using System;
using LiberacionProductoWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LiberacionProductoWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.Activities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ActivitiesProd");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.AnalyticalEquipament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("varchar(180)");

                    b.Property<int>("ConditioningOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("IsCalibrated")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(400)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("varchar(180)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConditioningOrderId");

                    b.ToTable("AnalyticalEquipament");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.Base.ActivitiesReportAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("ActivitiesReportAudit");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.Base.ReportAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Controller")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DateTime");

                    b.Property<string>("Detail")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("DistribuitionBatch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("NA");

                    b.Property<string>("Funcionality")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Method")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NewValue")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Plant")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PreviousValue")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Product")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProductionOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.Property<string>("User")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("reportAuditTrail");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.BatchAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("LowerLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpperLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BatchDetailsId");

                    b.ToTable("BatchAnalysis");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.BatchDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnalyzedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AnalyzedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("InCompliance")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<decimal>("Level")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NotInComplianceFolio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotInComplianceNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ReleasedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReleasedNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tank")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("BatchDetails");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.CheckListPipeAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CheckListPipeDictiumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DistributionBatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Notify")
                        .HasColumnType("varchar(400)");

                    b.Property<int>("NumOA")
                        .HasColumnType("int");

                    b.Property<string>("PipeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirement")
                        .HasColumnType("varchar(450)");

                    b.Property<int?>("Step")
                        .HasColumnType("int");

                    b.Property<string>("TourNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Verification")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("CheckListPipeAnswer");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.CheckListPipeCommentsAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CheckListPipeDictiumId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistributionBatch")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Group")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NumOA")
                        .HasColumnType("int");

                    b.Property<int?>("Step")
                        .HasColumnType("int");

                    b.Property<string>("TourNumber")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("checkListPipeCommentsAnswers");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.CheckListPipeDictiumAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistributionBatch")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("File")
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("InCompliance")
                        .HasColumnType("bit");

                    b.Property<string>("NumOA")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PipeNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("RelationShip")
                        .HasColumnType("bit");

                    b.Property<bool>("Source")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StatusTwo")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Step")
                        .HasColumnType("int");

                    b.Property<string>("TourNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Verification")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("VerificationTwo")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("CheckListPipeDictiumAnswer");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.CheckListPipeRecordAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApproveSC")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CheckListPipeDictiumId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistributionBatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOA")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Step")
                        .HasColumnType("int");

                    b.Property<string>("TourNumber")
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("checkListPipeRecordAnswers");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ComplementoPipa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConditioningOrderId")
                        .HasColumnType("int");

                    b.Property<string>("DisposicionPNC")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("FolioControlCambios")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FolioEventoAdverso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolioPNC")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FolioRetiroProductos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolioTrabajoNoConforme")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Hora")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroDeDevolucion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroLoteDistribucion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConditioningOrderId");

                    b.ToTable("ComplementoPipas");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ComplementoTanque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisposicionPNC")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("FolioControlCambios")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FolioPNC")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FolioTrabajoNoConforme")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Hora")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroLoteProduccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("ComplementoTanques");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DelegateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<string>("PlantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Presentation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonReject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleasedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReleasedNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepSaved")
                        .HasColumnType("int");

                    b.Property<string>("StepSavedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("ConditioningOrders");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ContainerCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PlantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Presentation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryContainer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TankId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("containerCatalogs");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.DispositionCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DispositionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("dispositionCatalogs");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.EntityExample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("entityExamples");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.EquipmentProcessConditioning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bay")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Bomb")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ConditioningOrderId")
                        .HasColumnType("int");

                    b.Property<string>("HoseDownload")
                        .HasColumnType("varchar(180)");

                    b.Property<string>("Hosefill")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(400)");

                    b.Property<string>("PipeNumber")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("varchar(180)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TourNumber")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ConditioningOrderId");

                    b.ToTable("EquipmentProcessConditioning");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.FormulaCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormulaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Presentation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TankId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("formulaCatalogs");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.GeneralCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BayArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeTool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConversionFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionTool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estatus")
                        .HasColumnType("bit");

                    b.Property<string>("FillingHose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FillingPump")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LowerLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessStep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TankId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpperLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Variable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VariableClasification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VariableSpecification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeighingMachine")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("generalCatalogs");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.HistorianInfoTagsPlant", b =>
                {
                    b.Property<int>("TagInfoRid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float?>("LowerBound")
                        .HasColumnType("real");

                    b.Property<string>("Plant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uomcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Uomsid")
                        .HasColumnType("int");

                    b.Property<float?>("UpperBound")
                        .HasColumnType("real");

                    b.Property<string>("Variable")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagInfoRid");

                    b.ToTable("HistorianInfoTagsPlants");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.HistorianReadingsPlant", b =>
                {
                    b.Property<int>("ReadingRid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ReadingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReadingQuality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("ReadingValue")
                        .HasColumnType("real");

                    b.Property<int>("TagRid")
                        .HasColumnType("int");

                    b.HasKey("ReadingRid");

                    b.HasIndex("TagRid");

                    b.ToTable("HistorianReadingsPlants");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.HistorianServer", b =>
                {
                    b.Property<int>("ServerRid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServerRid");

                    b.ToTable("HistorianServer");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.HistorianTagsPlant", b =>
                {
                    b.Property<int>("TagRid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IsActive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServerRid")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagPhysical")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagRid");

                    b.HasIndex("ServerRid");

                    b.ToTable("HistorianTagsPlants");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.HistoryNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HistoryNotes");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.HistoryStates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HistoryStates");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.MonitoringEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCalibrated")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("MonitoringEquipments");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PerformanceProcessConditioning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConditioningOrderId")
                        .HasColumnType("int");

                    b.Property<string>("DifTons")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PipeNumber")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("varchar(180)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SizeLote")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TotalTons")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TourNumber")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ConditioningOrderId");

                    b.ToTable("PerformanceProcessConditioning");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipeFilling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnalyzedBy")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("AnalyzedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("CheckListIncompliance")
                        .HasColumnType("bit");

                    b.Property<string>("CheckListStatus")
                        .HasColumnType("varchar(180)");

                    b.Property<int>("ConditioningOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiffWeight")
                        .IsRequired()
                        .HasColumnType("varchar(180)");

                    b.Property<string>("DistributionBatch")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinalAnalyzedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinalWeight")
                        .HasColumnType("varchar(180)");

                    b.Property<bool?>("InCompliance")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InitialAnalyzedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InitialWeight")
                        .HasColumnType("varchar(180)");

                    b.Property<bool?>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<int>("PipeFillingControlId")
                        .HasColumnType("int");

                    b.Property<string>("PipeNumber")
                        .HasColumnType("varchar(180)");

                    b.Property<string>("ReleasedBy")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportPNCFolio")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ReportPNCNotes")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ConditioningOrderId");

                    b.HasIndex("PipeFillingControlId");

                    b.ToTable("PipeFillings");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipeFillingAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConditioningOrderId")
                        .HasColumnType("int");

                    b.Property<string>("DistributionBatch")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ParameterName")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PathFile")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PipeNumber")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Unique")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ValueExpected")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ValueReal")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ConditioningOrderId");

                    b.ToTable("PipeFillingAnalyses");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipeFillingControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConditioningOrderId")
                        .HasColumnType("int");

                    b.Property<string>("TourNumber")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ConditioningOrderId");

                    b.ToTable("PipeFillingControls");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipeFillingCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnalysisReport")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ConditioningOrderId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryNumber")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DistributionBatch")
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("EmailListSend")
                        .HasColumnType("bit");

                    b.Property<string>("EmailsList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Folio")
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("InCompliance")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantIdentificador")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Tank")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TankId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TourNumber")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ConditioningOrderId");

                    b.ToTable("PipeFillingCustomers");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipeFillingCustomersFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConditioningOrderId")
                        .HasColumnType("int");

                    b.Property<string>("DistributionBatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileNameOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PipeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Tank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConditioningOrderId");

                    b.ToTable("PipeFillingCustomersFiles");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipelineClearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activitie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("InCompliance")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotesSecond")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProductionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProductionStartedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBySecond")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReviewedDateSecond")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("PipelineClearances");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipelineClearanceOA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activitie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConditioningOrderId")
                        .HasColumnType("int");

                    b.Property<bool?>("InCompliance")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotesSecond")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBySecond")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReviewedDateSecond")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConditioningOrderId");

                    b.ToTable("PipelineClearancesOA");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ProductCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormulaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Presentation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TankId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("productCatalogs");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ProductionEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("ProductionEquipments");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DelegateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("InCompliance")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<string>("PlantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonReject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleasedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReleasedNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepSaved")
                        .HasColumnType("int");

                    b.Property<string>("StepSavedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TankId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductionOrders");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrderAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvgValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChartPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviationReportFolio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviationReportNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("InCompliance")
                        .HasColumnType("bit");

                    b.Property<string>("MaxValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Variable")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("ProductionOrderAttributes");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrderHistorian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JsonFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("ProductionOrderHistorian");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ScalesFlowMeters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConditioningOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("IsCalibrated")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("varchar(180)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConditioningOrderId");

                    b.ToTable("ScalesFlowMeters");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.StabilityCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StudyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TankId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("stabiltyCatalogs");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.States", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StatesProd");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.StoredProcedureResult", b =>
                {
                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.ToTable("StoredProcedureResults");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.IndentityModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailUsuario")
                        .HasColumnType("varchar(70)");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaUltimaSesion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaUltimoIntento")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagenBase64Usuario")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LogActiveDirectory")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDataUsuario")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MexeUsuario")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PlantaUsuario")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Rol")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.IndentityModels.RoleUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomName")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.AnalyticalEquipament", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", "ConditioningOrder")
                        .WithMany()
                        .HasForeignKey("ConditioningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditioningOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.BatchAnalysis", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.BatchDetails", null)
                        .WithMany("BatchAnalysis")
                        .HasForeignKey("BatchDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.BatchDetails", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ComplementoPipa", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", "ConditioningOrder")
                        .WithMany()
                        .HasForeignKey("ConditioningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditioningOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ComplementoTanque", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrder", "productionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("productionOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.EquipmentProcessConditioning", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", "ConditioningOrder")
                        .WithMany()
                        .HasForeignKey("ConditioningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditioningOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.HistorianReadingsPlant", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.HistorianTagsPlant", "TagR")
                        .WithMany("HistorianReadingsPlants")
                        .HasForeignKey("TagRid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagR");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.HistorianTagsPlant", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.HistorianServer", "ServerR")
                        .WithMany("HistorianTagsPlants")
                        .HasForeignKey("ServerRid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServerR");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.MonitoringEquipment", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PerformanceProcessConditioning", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", "ConditioningOrder")
                        .WithMany()
                        .HasForeignKey("ConditioningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditioningOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipeFilling", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", "ConditioningOrder")
                        .WithMany()
                        .HasForeignKey("ConditioningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.PipeFillingControl", null)
                        .WithMany("PipesList")
                        .HasForeignKey("PipeFillingControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditioningOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipeFillingAnalysis", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", "ConditioningOrder")
                        .WithMany()
                        .HasForeignKey("ConditioningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditioningOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipeFillingControl", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", "ConditioningOrder")
                        .WithMany()
                        .HasForeignKey("ConditioningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditioningOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipeFillingCustomer", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", "ConditioningOrder")
                        .WithMany()
                        .HasForeignKey("ConditioningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditioningOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipeFillingCustomersFiles", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", "ConditioningOrder")
                        .WithMany()
                        .HasForeignKey("ConditioningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditioningOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipelineClearance", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipelineClearanceOA", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", "ConditioningOrder")
                        .WithMany()
                        .HasForeignKey("ConditioningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditioningOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ProductionEquipment", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrderAttribute", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrderHistorian", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ProductionOrder", "ProductionOrder")
                        .WithMany()
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.ScalesFlowMeters", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.DataBaseModels.ConditioningOrder", "ConditioningOrder")
                        .WithMany()
                        .HasForeignKey("ConditioningOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditioningOrder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.IndentityModels.RoleUser", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.IndentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.IndentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.IndentityModels.RoleUser", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiberacionProductoWeb.Models.IndentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LiberacionProductoWeb.Models.IndentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.BatchDetails", b =>
                {
                    b.Navigation("BatchAnalysis");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.HistorianServer", b =>
                {
                    b.Navigation("HistorianTagsPlants");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.HistorianTagsPlant", b =>
                {
                    b.Navigation("HistorianReadingsPlants");
                });

            modelBuilder.Entity("LiberacionProductoWeb.Models.DataBaseModels.PipeFillingControl", b =>
                {
                    b.Navigation("PipesList");
                });
#pragma warning restore 612, 618
        }
    }
}
